{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Image) {\n  var DocumentedImage = describe(Image).availableAt(getAvailableAtBadge('Image', 'Media')).description('An image.').usage(\"import { Image } from 'grommet';\\n<Image/>\").intrinsicElement('img');\n  DocumentedImage.propTypes = _extends({}, genericProps, {\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    fit: PropTypes.oneOf(['cover', 'contain']).description('How the image fills its container.'),\n    fallback: PropTypes.string.description(\"Specifies the URL of the fallback image used when \\n      src is failing to load\"),\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.string, PropTypes.bool]).description('Transparency of the image.')\n  });\n  return DocumentedImage;\n};\nexport var themeDoc = {\n  'global.opacity.medium': {\n    description: 'The value used when opacity is set to true.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'image.extend': {\n    description: 'Any additional style for the Image.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Image/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","doc","Image","DocumentedImage","availableAt","description","usage","intrinsicElement","propTypes","fill","oneOfType","oneOf","bool","fit","fallback","string","opacity","themeDoc","type","defaultValue","undefined"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,SAASQ,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,KAAb,EAAoB;AACnC,MAAIC,eAAe,GAAGN,QAAQ,CAACK,KAAD,CAAR,CAAgBE,WAAhB,CAA4BJ,mBAAmB,CAAC,OAAD,EAAU,OAAV,CAA/C,EAAmEK,WAAnE,CAA+E,WAA/E,EAA4FC,KAA5F,CAAkG,4CAAlG,EAAgJC,gBAAhJ,CAAiK,KAAjK,CAAtB;AACAJ,EAAAA,eAAe,CAACK,SAAhB,GAA4BxB,QAAQ,CAAC,EAAD,EAAKe,YAAL,EAAmB;AACrDU,IAAAA,IAAI,EAAEX,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACa,KAAV,CAAgB,CAAC,YAAD,EAAe,UAAf,CAAhB,CAAD,EAA8Cb,SAAS,CAACc,IAAxD,CAApB,EAAmFP,WAAnF,CAA+F,4DAA/F,CAD+C;AAErDQ,IAAAA,GAAG,EAAEf,SAAS,CAACa,KAAV,CAAgB,CAAC,OAAD,EAAU,SAAV,CAAhB,EAAsCN,WAAtC,CAAkD,oCAAlD,CAFgD;AAGrDS,IAAAA,QAAQ,EAAEhB,SAAS,CAACiB,MAAV,CAAiBV,WAAjB,CAA6B,kFAA7B,CAH2C;AAIrDW,IAAAA,OAAO,EAAElB,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACa,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAAhB,CAAD,EAAgDb,SAAS,CAACiB,MAA1D,EAAkEjB,SAAS,CAACc,IAA5E,CAApB,EAAuGP,WAAvG,CAAmH,4BAAnH;AAJ4C,GAAnB,CAApC;AAMA,SAAOF,eAAP;AACD,CATM;AAUP,OAAO,IAAIc,QAAQ,GAAG;AACpB,2BAAyB;AACvBZ,IAAAA,WAAW,EAAE,6CADU;AAEvBa,IAAAA,IAAI,EAAE,QAFiB;AAGvBC,IAAAA,YAAY,EAAE;AAHS,GADL;AAMpB,kBAAgB;AACdd,IAAAA,WAAW,EAAE,qCADC;AAEda,IAAAA,IAAI,EAAE,wBAFQ;AAGdC,IAAAA,YAAY,EAAEC;AAHA;AANI,CAAf","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Image) {\n  var DocumentedImage = describe(Image).availableAt(getAvailableAtBadge('Image', 'Media')).description('An image.').usage(\"import { Image } from 'grommet';\\n<Image/>\").intrinsicElement('img');\n  DocumentedImage.propTypes = _extends({}, genericProps, {\n    fill: PropTypes.oneOfType([PropTypes.oneOf(['horizontal', 'vertical']), PropTypes.bool]).description('Whether the width and/or height should fill the container.'),\n    fit: PropTypes.oneOf(['cover', 'contain']).description('How the image fills its container.'),\n    fallback: PropTypes.string.description(\"Specifies the URL of the fallback image used when \\n      src is failing to load\"),\n    opacity: PropTypes.oneOfType([PropTypes.oneOf(['weak', 'medium', 'strong']), PropTypes.string, PropTypes.bool]).description('Transparency of the image.')\n  });\n  return DocumentedImage;\n};\nexport var themeDoc = {\n  'global.opacity.medium': {\n    description: 'The value used when opacity is set to true.',\n    type: 'number',\n    defaultValue: '0.4'\n  },\n  'image.extend': {\n    description: 'Any additional style for the Image.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}