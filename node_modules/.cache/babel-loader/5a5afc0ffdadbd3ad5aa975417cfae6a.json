{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(TextArea) {\n  var DocumentedTextArea = describe(TextArea).availableAt(getAvailableAtBadge('TextArea', 'Input')).description('A control to input multiple lines of text.').usage(\"import { TextArea } from 'grommet';\\n<TextArea id='item' name='item' />\").intrinsicElement('textarea');\n  DocumentedTextArea.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    id: PropTypes.string.description('The id attribute of the textarea.'),\n    fill: PropTypes.bool.description('Whether the width and height should fill the container.').defaultValue(false),\n    focusIndicator: PropTypes.bool.description('Whether the plain TextArea should receive a focus outline.'),\n    name: PropTypes.string.description('The name attribute of the textarea.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the textarea.'),\n    placeholder: PropTypes.string.description('Placeholder text to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain textarea with no border or padding.\\nOnly use this when the containing context provides sufficient affordance.\"),\n    value: PropTypes.string.description('What text to put in the textarea.'),\n    resize: PropTypes.oneOfType([PropTypes.oneOf(['vertical', 'horizontal']), PropTypes.bool]).description('Whether user is allowed to resize the textarea.').defaultValue(true),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextArea.')\n  };\n  return DocumentedTextArea;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'textArea.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textArea.disabled.opacity': {\n    description: 'The opacity when the textArea is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, themeDocUtils.placeholderStyle, themeDocUtils.inputStyle, themeDocUtils.disabledStyle);","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/TextArea/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","getAvailableAtBadge","themeDocUtils","doc","TextArea","DocumentedTextArea","availableAt","description","usage","intrinsicElement","propTypes","a11yTitle","string","id","fill","bool","defaultValue","focusIndicator","name","onChange","func","placeholder","plain","value","resize","oneOfType","oneOf","size","themeDoc","type","dark","light","undefined","focusStyle","placeholderStyle","inputStyle","disabledStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(TextArea) {\n  var DocumentedTextArea = describe(TextArea).availableAt(getAvailableAtBadge('TextArea', 'Input')).description('A control to input multiple lines of text.').usage(\"import { TextArea } from 'grommet';\\n<TextArea id='item' name='item' />\").intrinsicElement('textarea');\n  DocumentedTextArea.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    id: PropTypes.string.description('The id attribute of the textarea.'),\n    fill: PropTypes.bool.description('Whether the width and height should fill the container.').defaultValue(false),\n    focusIndicator: PropTypes.bool.description('Whether the plain TextArea should receive a focus outline.'),\n    name: PropTypes.string.description('The name attribute of the textarea.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the textarea.'),\n    placeholder: PropTypes.string.description('Placeholder text to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain textarea with no border or padding.\\nOnly use this when the containing context provides sufficient affordance.\"),\n    value: PropTypes.string.description('What text to put in the textarea.'),\n    resize: PropTypes.oneOfType([PropTypes.oneOf(['vertical', 'horizontal']), PropTypes.bool]).description('Whether user is allowed to resize the textarea.').defaultValue(true),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextArea.')\n  };\n  return DocumentedTextArea;\n};\nexport var themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'textArea.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textArea.disabled.opacity': {\n    description: 'The opacity when the textArea is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, themeDocUtils.focusStyle, themeDocUtils.placeholderStyle, themeDocUtils.inputStyle, themeDocUtils.disabledStyle);"]},"metadata":{},"sourceType":"module"}