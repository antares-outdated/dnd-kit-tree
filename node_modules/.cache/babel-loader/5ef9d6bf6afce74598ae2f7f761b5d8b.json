{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { arrayMove } from \"@dnd-kit/sortable\";\nexport var iOS = /iPad|iPhone|iPod/.test(navigator.platform); // export const iOS = false;\n\nfunction getDragDepth(offset, indentationWidth) {\n  return Math.round(offset / indentationWidth);\n}\n\nexport function getProjection(items, activeId, overId, dragOffset, indentationWidth) {\n  var overItemIndex = items.findIndex(function (_ref) {\n    var id = _ref.id;\n    return id === overId;\n  });\n  var activeItemIndex = items.findIndex(function (_ref2) {\n    var id = _ref2.id;\n    return id === activeId;\n  });\n  var activeItem = items[activeItemIndex];\n  var newItems = arrayMove(items, activeItemIndex, overItemIndex);\n  var previousItem = newItems[overItemIndex - 1];\n  var nextItem = newItems[overItemIndex + 1];\n  var dragDepth = getDragDepth(dragOffset, indentationWidth);\n  var projectedDepth = activeItem.depth + dragDepth;\n  var maxDepth = getMaxDepth({\n    previousItem: previousItem\n  });\n  var minDepth = getMinDepth({\n    nextItem: nextItem\n  });\n  var depth = projectedDepth;\n\n  if (projectedDepth >= maxDepth) {\n    depth = maxDepth;\n  } else if (projectedDepth < minDepth) {\n    depth = minDepth;\n  }\n\n  return {\n    depth: depth,\n    maxDepth: maxDepth,\n    minDepth: minDepth,\n    parentId: getParentId()\n  };\n\n  function getParentId() {\n    var _newItems$slice$rever;\n\n    if (depth === 0 || !previousItem) {\n      return null;\n    }\n\n    if (depth === previousItem.depth) {\n      return previousItem.parentId;\n    }\n\n    if (depth > previousItem.depth) {\n      return previousItem.id;\n    }\n\n    var newParent = (_newItems$slice$rever = newItems.slice(0, overItemIndex).reverse().find(function (item) {\n      return item.depth === depth;\n    })) === null || _newItems$slice$rever === void 0 ? void 0 : _newItems$slice$rever.parentId;\n    return newParent !== null && newParent !== void 0 ? newParent : null;\n  }\n}\n\nfunction getMaxDepth(_ref3) {\n  var previousItem = _ref3.previousItem;\n\n  if (previousItem) {\n    return previousItem.depth + 1;\n  }\n\n  return 0;\n}\n\nfunction getMinDepth(_ref4) {\n  var nextItem = _ref4.nextItem;\n\n  if (nextItem) {\n    return nextItem.depth;\n  }\n\n  return 0;\n}\n\nfunction flatten(items) {\n  var parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return items.reduce(function (acc, item, index) {\n    return [].concat(_toConsumableArray(acc), [_objectSpread(_objectSpread({}, item), {}, {\n      parentId: parentId,\n      depth: depth,\n      index: index\n    })], _toConsumableArray(flatten(item.children, item.id, depth + 1)));\n  }, []);\n}\n\nexport function flattenTree(items) {\n  return flatten(items);\n}\nexport function buildTree(flattenedItems) {\n  var root = {\n    id: \"root\",\n    children: []\n  };\n\n  var nodes = _defineProperty({}, root.id, root);\n\n  var items = flattenedItems.map(function (item) {\n    return _objectSpread(_objectSpread({}, item), {}, {\n      children: []\n    });\n  });\n\n  var _iterator = _createForOfIteratorHelper(items),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _item$parentId, _nodes$parentId;\n\n      var item = _step.value;\n      var id = item.id,\n          children = item.children;\n      var parentId = (_item$parentId = item.parentId) !== null && _item$parentId !== void 0 ? _item$parentId : root.id;\n      var parent = (_nodes$parentId = nodes[parentId]) !== null && _nodes$parentId !== void 0 ? _nodes$parentId : findItem(items, parentId);\n      nodes[id] = {\n        id: id,\n        children: children\n      };\n      parent.children.push(item);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return root.children;\n}\nexport function findItem(items, itemId) {\n  return items.find(function (_ref5) {\n    var id = _ref5.id;\n    return id === itemId;\n  });\n}\nexport function findItemDeep(items, itemId) {\n  var _iterator2 = _createForOfIteratorHelper(items),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      var id = item.id,\n          children = item.children;\n\n      if (id === itemId) {\n        return item;\n      }\n\n      if (children.length) {\n        var child = findItemDeep(children, itemId);\n\n        if (child) {\n          return child;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return undefined;\n}\nexport function removeItem(items, id) {\n  var newItems = [];\n\n  var _iterator3 = _createForOfIteratorHelper(items),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var item = _step3.value;\n\n      if (item.id === id) {\n        continue;\n      }\n\n      if (item.children.length) {\n        item.children = removeItem(item.children, id);\n      }\n\n      newItems.push(item);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return newItems;\n}\nexport function setProperty(items, id, property, setter) {\n  var _iterator4 = _createForOfIteratorHelper(items),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var item = _step4.value;\n\n      if (item.id === id) {\n        item[property] = setter(item[property]);\n        continue;\n      }\n\n      if (item.children.length) {\n        item.children = setProperty(item.children, id, property, setter);\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return _toConsumableArray(items);\n}\n\nfunction countChildren(items) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return items.reduce(function (acc, _ref6) {\n    var children = _ref6.children;\n\n    if (children.length) {\n      return countChildren(children, acc + 1);\n    }\n\n    return acc + 1;\n  }, count);\n}\n\nexport function getChildCount(items, id) {\n  if (!id) {\n    return 0;\n  }\n\n  var item = findItemDeep(items, id);\n  return item ? countChildren(item.children) : 0;\n}\nexport function removeChildrenOf(items, ids) {\n  var excludeParentIds = _toConsumableArray(ids);\n\n  return items.filter(function (item) {\n    if (item.parentId && excludeParentIds.includes(item.parentId)) {\n      if (item.children.length) {\n        excludeParentIds.push(item.id);\n      }\n\n      return false;\n    }\n\n    return true;\n  });\n}","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/src/components/utilities.ts"],"names":["arrayMove","iOS","test","navigator","platform","getDragDepth","offset","indentationWidth","Math","round","getProjection","items","activeId","overId","dragOffset","overItemIndex","findIndex","id","activeItemIndex","activeItem","newItems","previousItem","nextItem","dragDepth","projectedDepth","depth","maxDepth","getMaxDepth","minDepth","getMinDepth","parentId","getParentId","newParent","slice","reverse","find","item","flatten","reduce","acc","index","children","flattenTree","buildTree","flattenedItems","root","nodes","map","parent","findItem","push","itemId","findItemDeep","length","child","undefined","removeItem","setProperty","property","setter","countChildren","count","getChildCount","removeChildrenOf","ids","excludeParentIds","filter","includes"],"mappings":"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","sourcesContent":["import { arrayMove } from \"@dnd-kit/sortable\";\r\n\r\nimport type { FlattenedItem, TreeItem, TreeItems } from \"./types\";\r\n\r\nexport const iOS = /iPad|iPhone|iPod/.test(navigator.platform);\r\n// export const iOS = false;\r\n\r\nfunction getDragDepth(offset: number, indentationWidth: number) {\r\n  return Math.round(offset / indentationWidth);\r\n}\r\n\r\nexport function getProjection(\r\n  items: FlattenedItem[],\r\n  activeId: string,\r\n  overId: string,\r\n  dragOffset: number,\r\n  indentationWidth: number\r\n) {\r\n  const overItemIndex = items.findIndex(({ id }) => id === overId);\r\n  const activeItemIndex = items.findIndex(({ id }) => id === activeId);\r\n  const activeItem = items[activeItemIndex];\r\n  const newItems = arrayMove(items, activeItemIndex, overItemIndex);\r\n  const previousItem = newItems[overItemIndex - 1];\r\n  const nextItem = newItems[overItemIndex + 1];\r\n  const dragDepth = getDragDepth(dragOffset, indentationWidth);\r\n  const projectedDepth = activeItem.depth + dragDepth;\r\n  const maxDepth = getMaxDepth({\r\n    previousItem\r\n  });\r\n  const minDepth = getMinDepth({ nextItem });\r\n  let depth = projectedDepth;\r\n\r\n  if (projectedDepth >= maxDepth) {\r\n    depth = maxDepth;\r\n  } else if (projectedDepth < minDepth) {\r\n    depth = minDepth;\r\n  }\r\n\r\n  return { depth, maxDepth, minDepth, parentId: getParentId() };\r\n\r\n  function getParentId() {\r\n    if (depth === 0 || !previousItem) {\r\n      return null;\r\n    }\r\n\r\n    if (depth === previousItem.depth) {\r\n      return previousItem.parentId;\r\n    }\r\n\r\n    if (depth > previousItem.depth) {\r\n      return previousItem.id;\r\n    }\r\n\r\n    const newParent = newItems\r\n      .slice(0, overItemIndex)\r\n      .reverse()\r\n      .find((item) => item.depth === depth)?.parentId;\r\n\r\n    return newParent ?? null;\r\n  }\r\n}\r\n\r\nfunction getMaxDepth({ previousItem }: { previousItem: FlattenedItem }) {\r\n  if (previousItem) {\r\n    return previousItem.depth + 1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction getMinDepth({ nextItem }: { nextItem: FlattenedItem }) {\r\n  if (nextItem) {\r\n    return nextItem.depth;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction flatten(\r\n  items: TreeItems,\r\n  parentId: string | null = null,\r\n  depth = 0\r\n): FlattenedItem[] {\r\n  return items.reduce<FlattenedItem[]>((acc, item, index) => {\r\n    return [\r\n      ...acc,\r\n      { ...item, parentId, depth, index },\r\n      ...flatten(item.children, item.id, depth + 1)\r\n    ];\r\n  }, []);\r\n}\r\n\r\nexport function flattenTree(items: TreeItems): FlattenedItem[] {\r\n  return flatten(items);\r\n}\r\n\r\nexport function buildTree(flattenedItems: FlattenedItem[]): TreeItems {\r\n  const root: TreeItem = { id: \"root\", children: [] };\r\n  const nodes: Record<string, TreeItem> = { [root.id]: root };\r\n  const items = flattenedItems.map((item) => ({ ...item, children: [] }));\r\n\r\n  for (const item of items) {\r\n    const { id, children } = item;\r\n    const parentId = item.parentId ?? root.id;\r\n    const parent = nodes[parentId] ?? findItem(items, parentId);\r\n\r\n    nodes[id] = { id, children };\r\n    parent.children.push(item);\r\n  }\r\n\r\n  return root.children;\r\n}\r\n\r\nexport function findItem(items: TreeItem[], itemId: string) {\r\n  return items.find(({ id }) => id === itemId);\r\n}\r\n\r\nexport function findItemDeep(\r\n  items: TreeItems,\r\n  itemId: string\r\n): TreeItem | undefined {\r\n  for (const item of items) {\r\n    const { id, children } = item;\r\n\r\n    if (id === itemId) {\r\n      return item;\r\n    }\r\n\r\n    if (children.length) {\r\n      const child = findItemDeep(children, itemId);\r\n\r\n      if (child) {\r\n        return child;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nexport function removeItem(items: TreeItems, id: string) {\r\n  const newItems = [];\r\n\r\n  for (const item of items) {\r\n    if (item.id === id) {\r\n      continue;\r\n    }\r\n\r\n    if (item.children.length) {\r\n      item.children = removeItem(item.children, id);\r\n    }\r\n\r\n    newItems.push(item);\r\n  }\r\n\r\n  return newItems;\r\n}\r\n\r\nexport function setProperty<T extends keyof TreeItem>(\r\n  items: TreeItems,\r\n  id: string,\r\n  property: T,\r\n  setter: (value: TreeItem[T]) => TreeItem[T]\r\n) {\r\n  for (const item of items) {\r\n    if (item.id === id) {\r\n      item[property] = setter(item[property]);\r\n      continue;\r\n    }\r\n\r\n    if (item.children.length) {\r\n      item.children = setProperty(item.children, id, property, setter);\r\n    }\r\n  }\r\n\r\n  return [...items];\r\n}\r\n\r\nfunction countChildren(items: TreeItem[], count = 0): number {\r\n  return items.reduce((acc, { children }) => {\r\n    if (children.length) {\r\n      return countChildren(children, acc + 1);\r\n    }\r\n\r\n    return acc + 1;\r\n  }, count);\r\n}\r\n\r\nexport function getChildCount(items: TreeItems, id: string) {\r\n  if (!id) {\r\n    return 0;\r\n  }\r\n\r\n  const item = findItemDeep(items, id);\r\n\r\n  return item ? countChildren(item.children) : 0;\r\n}\r\n\r\nexport function removeChildrenOf(items: FlattenedItem[], ids: string[]) {\r\n  const excludeParentIds = [...ids];\r\n\r\n  return items.filter((item) => {\r\n    if (item.parentId && excludeParentIds.includes(item.parentId)) {\r\n      if (item.children.length) {\r\n        excludeParentIds.push(item.id);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}