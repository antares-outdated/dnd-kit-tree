{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(CheckBoxGroup) {\n  var DocumentedCheckBoxGroup = describe(CheckBoxGroup).availableAt(getAvailableAtBadge('CheckBoxGroup', 'Input')).description('A group of CheckBoxes.').usage(\"import { CheckBoxGroup } from 'grommet';\\n        <CheckBoxGroup />\").intrinsicElement('div');\n  DocumentedCheckBoxGroup.propTypes = {\n    value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])).description(\"An array of the values for the checked options. \\n      If options is provided as an object, the value array will be the values \\n     that the valueKey maps to.\"),\n    disabled: PropTypes.bool.description(\"Disables all options.\").defaultValue(undefined),\n    labelKey: PropTypes.string.description(\"When the options array contains objects, this property indicates how\\n        to determine the label of each option. If a string is\\n        provided, it is used as the key to retrieve each option's label.\"),\n    name: PropTypes.string.description(\"Required when used in the Context of Form and FormField.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks on a CheckBox option. \\n      It will pass a React event object with the additional CheckBoxGroup \\n      properties of 'option' and 'value'.\"),\n    options: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.arrayOf(PropTypes.shape({}))]).description(\"Options can be either a string or an object of CheckBox props \\n      excluding the 'checked' property, use CheckBoxGroup 'value' prop instead \\n      of 'checked'.\").isRequired,\n    valueKey: PropTypes.string.description(\"When the options array contains objects, this property indicates how\\n        to determine the value of each option. If a string is provided, \\n        it is used as the key to retrieve each option's value.\")\n  };\n  return DocumentedCheckBoxGroup;\n};\nexport var themeDoc = {\n  'checkBoxGroup.container': {\n    description: 'Any valid Box props for the CheckBoxGroup container.',\n    type: 'object',\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/CheckBoxGroup/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","CheckBoxGroup","DocumentedCheckBoxGroup","availableAt","description","usage","intrinsicElement","propTypes","value","arrayOf","oneOfType","number","string","disabled","bool","defaultValue","undefined","labelKey","name","onChange","func","options","shape","isRequired","valueKey","themeDoc","type"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,aAAb,EAA4B;AAC3C,MAAIC,uBAAuB,GAAGL,QAAQ,CAACI,aAAD,CAAR,CAAwBE,WAAxB,CAAoCJ,mBAAmB,CAAC,eAAD,EAAkB,OAAlB,CAAvD,EAAmFK,WAAnF,CAA+F,wBAA/F,EAAyHC,KAAzH,CAA+H,qEAA/H,EAAsMC,gBAAtM,CAAuN,KAAvN,CAA9B;AACAJ,EAAAA,uBAAuB,CAACK,SAAxB,GAAoC;AAClCC,IAAAA,KAAK,EAAEV,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACa,MAAX,EAAmBb,SAAS,CAACc,MAA7B,CAApB,CAAlB,EAA6ER,WAA7E,CAAyF,mKAAzF,CAD2B;AAElCS,IAAAA,QAAQ,EAAEf,SAAS,CAACgB,IAAV,CAAeV,WAAf,CAA2B,uBAA3B,EAAoDW,YAApD,CAAiEC,SAAjE,CAFwB;AAGlCC,IAAAA,QAAQ,EAAEnB,SAAS,CAACc,MAAV,CAAiBR,WAAjB,CAA6B,+MAA7B,CAHwB;AAIlCc,IAAAA,IAAI,EAAEpB,SAAS,CAACc,MAAV,CAAiBR,WAAjB,CAA6B,0DAA7B,CAJ4B;AAKlCe,IAAAA,QAAQ,EAAErB,SAAS,CAACsB,IAAV,CAAehB,WAAf,CAA2B,iMAA3B,CALwB;AAMlCiB,IAAAA,OAAO,EAAEvB,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACc,MAA5B,CAAD,EAAsCd,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACwB,KAAV,CAAgB,EAAhB,CAAlB,CAAtC,CAApB,EAAmGlB,WAAnG,CAA+G,sKAA/G,EAAuRmB,UAN9P;AAOlCC,IAAAA,QAAQ,EAAE1B,SAAS,CAACc,MAAV,CAAiBR,WAAjB,CAA6B,gNAA7B;AAPwB,GAApC;AASA,SAAOF,uBAAP;AACD,CAZM;AAaP,OAAO,IAAIuB,QAAQ,GAAG;AACpB,6BAA2B;AACzBrB,IAAAA,WAAW,EAAE,sDADY;AAEzBsB,IAAAA,IAAI,EAAE,QAFmB;AAGzBX,IAAAA,YAAY,EAAEC;AAHW;AADP,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(CheckBoxGroup) {\n  var DocumentedCheckBoxGroup = describe(CheckBoxGroup).availableAt(getAvailableAtBadge('CheckBoxGroup', 'Input')).description('A group of CheckBoxes.').usage(\"import { CheckBoxGroup } from 'grommet';\\n        <CheckBoxGroup />\").intrinsicElement('div');\n  DocumentedCheckBoxGroup.propTypes = {\n    value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])).description(\"An array of the values for the checked options. \\n      If options is provided as an object, the value array will be the values \\n     that the valueKey maps to.\"),\n    disabled: PropTypes.bool.description(\"Disables all options.\").defaultValue(undefined),\n    labelKey: PropTypes.string.description(\"When the options array contains objects, this property indicates how\\n        to determine the label of each option. If a string is\\n        provided, it is used as the key to retrieve each option's label.\"),\n    name: PropTypes.string.description(\"Required when used in the Context of Form and FormField.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks on a CheckBox option. \\n      It will pass a React event object with the additional CheckBoxGroup \\n      properties of 'option' and 'value'.\"),\n    options: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.arrayOf(PropTypes.shape({}))]).description(\"Options can be either a string or an object of CheckBox props \\n      excluding the 'checked' property, use CheckBoxGroup 'value' prop instead \\n      of 'checked'.\").isRequired,\n    valueKey: PropTypes.string.description(\"When the options array contains objects, this property indicates how\\n        to determine the value of each option. If a string is provided, \\n        it is used as the key to retrieve each option's value.\")\n  };\n  return DocumentedCheckBoxGroup;\n};\nexport var themeDoc = {\n  'checkBoxGroup.container': {\n    description: 'Any valid Box props for the CheckBoxGroup container.',\n    type: 'object',\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}