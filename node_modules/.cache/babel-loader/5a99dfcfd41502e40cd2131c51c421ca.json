{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nexport function doc(Panel) {\n  var DocumentedAccordionPanel = describe(Panel).description('An Accordion panel.').intrinsicElement('div');\n  DocumentedAccordionPanel.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).description('The panel label.'),\n    header: PropTypes.node.description('If specified, the entire panel header will be managed by the caller.')\n  };\n  return DocumentedAccordionPanel;\n}\nexport var themeDoc = {\n  'accordion.hover.heading.color': {\n    description: \"The text color of the heading when hovered. \\n    backward compatible with accordion.hover.color\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{ dark: \"light-4\", light: \"dark-3\" }'\n  },\n  'accordion.heading.level': {\n    description: 'The heading level.',\n    type: 'number',\n    defaultValue: '4'\n  },\n  'accordion.heading.margin': {\n    description: 'The margin size around the heading.',\n    type: 'string',\n    defaultValue: 'undefined'\n  },\n  'accordion.icons.collapse': {\n    description: 'The icon to use when the panel is expanded.',\n    type: 'React.Element',\n    defaultValue: '<FormUp />'\n  },\n  'accordion.icons.color': {\n    description: 'The icon color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'control'\n  },\n  'accordion.icons.expand': {\n    description: 'The icon to use when the panel is collapsed.',\n    type: 'React.Element',\n    defaultValue: '<FormDown />'\n  },\n  'accordion.border.color': {\n    description: 'The border color to use in the accordion panel content.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'border'\n  },\n  'accordion.border.side': {\n    description: 'The border side to use in the accordion panel content.',\n    type: 'string',\n    defaultValue: 'bottom'\n  },\n  'accordion.panel.border.color': {\n    description: 'The border color to use on the accordion panel.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: undefined\n  },\n  'accordion.panel.border.side': {\n    description: 'The border side to use on the accordion panel.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'accordion.panel.border.size': {\n    description: 'The border size of the accordion panel.',\n    type: \"xsmall | small | medium | large | xlarge\",\n    defaultValue: undefined\n  },\n  'accordion.panel.border.style': {\n    description: 'The border style of the accordion panel.',\n    type: \"solid | dashed | dotted | double| groove | ridge \\n      | inset | outset | hidden\",\n    defaultValue: undefined\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/AccordionPanel/doc.js"],"names":["describe","PropTypes","doc","Panel","DocumentedAccordionPanel","description","intrinsicElement","propTypes","label","oneOfType","string","node","header","themeDoc","type","defaultValue","undefined"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACzB,MAAIC,wBAAwB,GAAGJ,QAAQ,CAACG,KAAD,CAAR,CAAgBE,WAAhB,CAA4B,qBAA5B,EAAmDC,gBAAnD,CAAoE,KAApE,CAA/B;AACAF,EAAAA,wBAAwB,CAACG,SAAzB,GAAqC;AACnCC,IAAAA,KAAK,EAAEP,SAAS,CAACQ,SAAV,CAAoB,CAACR,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACU,IAA7B,CAApB,EAAwDN,WAAxD,CAAoE,kBAApE,CAD4B;AAEnCO,IAAAA,MAAM,EAAEX,SAAS,CAACU,IAAV,CAAeN,WAAf,CAA2B,sEAA3B;AAF2B,GAArC;AAIA,SAAOD,wBAAP;AACD;AACD,OAAO,IAAIS,QAAQ,GAAG;AACpB,mCAAiC;AAC/BR,IAAAA,WAAW,EAAE,kGADkB;AAE/BS,IAAAA,IAAI,EAAE,0CAFyB;AAG/BC,IAAAA,YAAY,EAAE;AAHiB,GADb;AAMpB,6BAA2B;AACzBV,IAAAA,WAAW,EAAE,oBADY;AAEzBS,IAAAA,IAAI,EAAE,QAFmB;AAGzBC,IAAAA,YAAY,EAAE;AAHW,GANP;AAWpB,8BAA4B;AAC1BV,IAAAA,WAAW,EAAE,qCADa;AAE1BS,IAAAA,IAAI,EAAE,QAFoB;AAG1BC,IAAAA,YAAY,EAAE;AAHY,GAXR;AAgBpB,8BAA4B;AAC1BV,IAAAA,WAAW,EAAE,6CADa;AAE1BS,IAAAA,IAAI,EAAE,eAFoB;AAG1BC,IAAAA,YAAY,EAAE;AAHY,GAhBR;AAqBpB,2BAAyB;AACvBV,IAAAA,WAAW,EAAE,yCADU;AAEvBS,IAAAA,IAAI,EAAE,0CAFiB;AAGvBC,IAAAA,YAAY,EAAE;AAHS,GArBL;AA0BpB,4BAA0B;AACxBV,IAAAA,WAAW,EAAE,8CADW;AAExBS,IAAAA,IAAI,EAAE,eAFkB;AAGxBC,IAAAA,YAAY,EAAE;AAHU,GA1BN;AA+BpB,4BAA0B;AACxBV,IAAAA,WAAW,EAAE,yDADW;AAExBS,IAAAA,IAAI,EAAE,0CAFkB;AAGxBC,IAAAA,YAAY,EAAE;AAHU,GA/BN;AAoCpB,2BAAyB;AACvBV,IAAAA,WAAW,EAAE,wDADU;AAEvBS,IAAAA,IAAI,EAAE,QAFiB;AAGvBC,IAAAA,YAAY,EAAE;AAHS,GApCL;AAyCpB,kCAAgC;AAC9BV,IAAAA,WAAW,EAAE,iDADiB;AAE9BS,IAAAA,IAAI,EAAE,0CAFwB;AAG9BC,IAAAA,YAAY,EAAEC;AAHgB,GAzCZ;AA8CpB,iCAA+B;AAC7BX,IAAAA,WAAW,EAAE,gDADgB;AAE7BS,IAAAA,IAAI,EAAE,QAFuB;AAG7BC,IAAAA,YAAY,EAAEC;AAHe,GA9CX;AAmDpB,iCAA+B;AAC7BX,IAAAA,WAAW,EAAE,yCADgB;AAE7BS,IAAAA,IAAI,EAAE,0CAFuB;AAG7BC,IAAAA,YAAY,EAAEC;AAHe,GAnDX;AAwDpB,kCAAgC;AAC9BX,IAAAA,WAAW,EAAE,0CADiB;AAE9BS,IAAAA,IAAI,EAAE,oFAFwB;AAG9BC,IAAAA,YAAY,EAAEC;AAHgB;AAxDZ,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nexport function doc(Panel) {\n  var DocumentedAccordionPanel = describe(Panel).description('An Accordion panel.').intrinsicElement('div');\n  DocumentedAccordionPanel.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).description('The panel label.'),\n    header: PropTypes.node.description('If specified, the entire panel header will be managed by the caller.')\n  };\n  return DocumentedAccordionPanel;\n}\nexport var themeDoc = {\n  'accordion.hover.heading.color': {\n    description: \"The text color of the heading when hovered. \\n    backward compatible with accordion.hover.color\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{ dark: \"light-4\", light: \"dark-3\" }'\n  },\n  'accordion.heading.level': {\n    description: 'The heading level.',\n    type: 'number',\n    defaultValue: '4'\n  },\n  'accordion.heading.margin': {\n    description: 'The margin size around the heading.',\n    type: 'string',\n    defaultValue: 'undefined'\n  },\n  'accordion.icons.collapse': {\n    description: 'The icon to use when the panel is expanded.',\n    type: 'React.Element',\n    defaultValue: '<FormUp />'\n  },\n  'accordion.icons.color': {\n    description: 'The icon color to use in the accordion.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'control'\n  },\n  'accordion.icons.expand': {\n    description: 'The icon to use when the panel is collapsed.',\n    type: 'React.Element',\n    defaultValue: '<FormDown />'\n  },\n  'accordion.border.color': {\n    description: 'The border color to use in the accordion panel content.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'border'\n  },\n  'accordion.border.side': {\n    description: 'The border side to use in the accordion panel content.',\n    type: 'string',\n    defaultValue: 'bottom'\n  },\n  'accordion.panel.border.color': {\n    description: 'The border color to use on the accordion panel.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: undefined\n  },\n  'accordion.panel.border.side': {\n    description: 'The border side to use on the accordion panel.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'accordion.panel.border.size': {\n    description: 'The border size of the accordion panel.',\n    type: \"xsmall | small | medium | large | xlarge\",\n    defaultValue: undefined\n  },\n  'accordion.panel.border.style': {\n    description: 'The border style of the accordion panel.',\n    type: \"solid | dashed | dotted | double| groove | ridge \\n      | inset | outset | hidden\",\n    defaultValue: undefined\n  }\n};"]},"metadata":{},"sourceType":"module"}