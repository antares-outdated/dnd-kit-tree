{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Anchor) {\n  var DocumentedAnchor = describe(Anchor).availableAt(getAvailableAtBadge('Anchor', 'Controls')).description('A text link.').details(\"We have a separate component from the browser\\nbase so we can style it. You can either set the icon and/or label properties\\nor just use children.\").usage(\"import { Anchor } from 'grommet';\\n\" + \"<Anchor href={location} label='Label' />\").intrinsicElement('a');\n  DocumentedAnchor.propTypes = _extends({}, genericProps, {\n    a11yTitle: PropTypes.string.description('Custom title to be used by screen readers.'),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag or react component to use for the element.\"),\n    color: colorPropType.description('Label color and icon color, if not specified on the icon.'),\n    disabled: PropTypes.bool.description('Whether the anchor is disabled.').defaultValue(false),\n    href: PropTypes.string.description('Hyperlink reference to place in the anchor.'),\n    icon: PropTypes.element.description('Icon element to place in the anchor.'),\n    label: PropTypes.node.description('Label text to place in the anchor.'),\n    onClick: PropTypes.func.description(\"Click handler. It can be used, for example,\\n        to add analytics and track who clicked in the anchor.\"),\n    reverse: PropTypes.bool.description(\"Whether an icon and label should be reversed so that the\\n        icon is at the end of the anchor.\").defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description(\"The font size is typically driven by the components containing\\nthis component. But, it can be adjusted directly via this size property,\\ntypically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.\"),\n    weight: PropTypes.oneOfType([PropTypes.oneOf(['normal', 'bold']), PropTypes.number]).description('Sets font-weight property for anchor.')\n  });\n  return DocumentedAnchor;\n};\nexport var themeDoc = _extends({\n  'anchor.color': {\n    description: 'The color of the label text and icon strokes.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ light: '#1D67E3', dark: '#6194EB' }\"\n  },\n  'anchor.fontWeight': {\n    description: 'The font weight of the label.',\n    type: 'number',\n    defaultValue: 600\n  },\n  'anchor.textDecoration': {\n    description: \"The text decoration of the label.\\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'anchor.hover.fontWeight': {\n    description: 'The font weight of the label when hovering.',\n    type: 'number',\n    defaultValue: undefined\n  },\n  'anchor.hover.textDecoration': {\n    description: \"The text decoration of the label when hovering.\\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'underline'\n  },\n  'anchor.hover.extend': {\n    description: 'Any additional style for the Anchor when hovering.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'anchor.extend': {\n    description: 'Any additional style for the Anchor.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n}, themeDocUtils.focusStyle, themeDocUtils.edgeStyle('The possible sizes for margin.'));","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Anchor/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","colorPropType","genericProps","getAvailableAtBadge","themeDocUtils","doc","Anchor","DocumentedAnchor","availableAt","description","details","usage","intrinsicElement","propTypes","a11yTitle","string","as","oneOfType","func","color","disabled","bool","defaultValue","href","icon","element","label","node","onClick","reverse","size","oneOf","weight","number","themeDoc","type","undefined","focusStyle","edgeStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Anchor) {\n  var DocumentedAnchor = describe(Anchor).availableAt(getAvailableAtBadge('Anchor', 'Controls')).description('A text link.').details(\"We have a separate component from the browser\\nbase so we can style it. You can either set the icon and/or label properties\\nor just use children.\").usage(\"import { Anchor } from 'grommet';\\n\" + \"<Anchor href={location} label='Label' />\").intrinsicElement('a');\n  DocumentedAnchor.propTypes = _extends({}, genericProps, {\n    a11yTitle: PropTypes.string.description('Custom title to be used by screen readers.'),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag or react component to use for the element.\"),\n    color: colorPropType.description('Label color and icon color, if not specified on the icon.'),\n    disabled: PropTypes.bool.description('Whether the anchor is disabled.').defaultValue(false),\n    href: PropTypes.string.description('Hyperlink reference to place in the anchor.'),\n    icon: PropTypes.element.description('Icon element to place in the anchor.'),\n    label: PropTypes.node.description('Label text to place in the anchor.'),\n    onClick: PropTypes.func.description(\"Click handler. It can be used, for example,\\n        to add analytics and track who clicked in the anchor.\"),\n    reverse: PropTypes.bool.description(\"Whether an icon and label should be reversed so that the\\n        icon is at the end of the anchor.\").defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), PropTypes.string]).description(\"The font size is typically driven by the components containing\\nthis component. But, it can be adjusted directly via this size property,\\ntypically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.\"),\n    weight: PropTypes.oneOfType([PropTypes.oneOf(['normal', 'bold']), PropTypes.number]).description('Sets font-weight property for anchor.')\n  });\n  return DocumentedAnchor;\n};\nexport var themeDoc = _extends({\n  'anchor.color': {\n    description: 'The color of the label text and icon strokes.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ light: '#1D67E3', dark: '#6194EB' }\"\n  },\n  'anchor.fontWeight': {\n    description: 'The font weight of the label.',\n    type: 'number',\n    defaultValue: 600\n  },\n  'anchor.textDecoration': {\n    description: \"The text decoration of the label.\\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'anchor.hover.fontWeight': {\n    description: 'The font weight of the label when hovering.',\n    type: 'number',\n    defaultValue: undefined\n  },\n  'anchor.hover.textDecoration': {\n    description: \"The text decoration of the label when hovering.\\nRefer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)\\nfor possible values.\",\n    type: 'string',\n    defaultValue: 'underline'\n  },\n  'anchor.hover.extend': {\n    description: 'Any additional style for the Anchor when hovering.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'anchor.extend': {\n    description: 'Any additional style for the Anchor.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n}, themeDocUtils.focusStyle, themeDocUtils.edgeStyle('The possible sizes for margin.'));"]},"metadata":{},"sourceType":"module"}