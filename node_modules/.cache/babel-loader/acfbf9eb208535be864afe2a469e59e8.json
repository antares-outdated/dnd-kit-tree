{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Spinner) {\n  var DocumentedSpinner = describe(Spinner).availableAt(getAvailableAtBadge('Spinner', 'Visualizations')).description('A Spinner.').usage(\"import { Spinner } from 'grommet';\\n<Spinner/>\");\n  DocumentedSpinner.propTypes = {\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('A fixed size.').defaultValue('small'),\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      dark: PropTypes.string,\n      light: PropTypes.string\n    })]).description('The border color of the Spinner.').defaultValue(undefined),\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      start: PropTypes.string,\n      end: PropTypes.string\n    })]).description(\"When message is a string, the message will be announced for \\n        screen readers once the Spinner is loaded. \\n        When an object, the 'start' message will be announced \\n        as the Spinner appears, and the 'end' message as the spinner closes.\").defaultValue(undefined)\n  };\n  return DocumentedSpinner;\n};\nexport var themeDoc = {\n  'spinner.container': {\n    description: \"Any valid Box prop for the Spinner container. \\n    Including 'color' for the spinner border color and 'size' for the default \\n    size of the Spinner.\",\n    type: 'object',\n    defaultValue: {\n      animation: 'rotateRight',\n      color: 'brand',\n      pad: 'small',\n      round: 'full',\n      size: 'small'\n    }\n  },\n  'spinner.icon': {\n    description: \"An icon or an SVG to use as the default Spinner.\",\n    type: 'ReactElement | SVG',\n    defaultValue: undefined\n  },\n  'spinner.size.xsmall': {\n    description: 'The xsmall size of the Spinner.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'spinner.size.small': {\n    description: 'The small size of the Spinner.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'spinner.size.medium': {\n    description: 'The medium size of the Spinner.',\n    type: 'string',\n    defaultValue: '48px'\n  },\n  'spinner.size.large': {\n    description: 'The large size of the Spinner.',\n    type: 'string',\n    defaultValue: '72px'\n  },\n  'spinner.size.xlarge': {\n    description: 'The xlarge size of the Spinner.',\n    type: 'string',\n    defaultValue: '96px'\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Spinner/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","Spinner","DocumentedSpinner","availableAt","description","usage","propTypes","size","oneOfType","oneOf","string","defaultValue","color","shape","dark","light","undefined","message","start","end","themeDoc","type","animation","pad","round"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,OAAb,EAAsB;AACrC,MAAIC,iBAAiB,GAAGL,QAAQ,CAACI,OAAD,CAAR,CAAkBE,WAAlB,CAA8BJ,mBAAmB,CAAC,SAAD,EAAY,gBAAZ,CAAjD,EAAgFK,WAAhF,CAA4F,YAA5F,EAA0GC,KAA1G,CAAgH,gDAAhH,CAAxB;AACAH,EAAAA,iBAAiB,CAACI,SAAlB,GAA8B;AAC5BC,IAAAA,IAAI,EAAET,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACW,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,EAA8B,OAA9B,EAAuC,QAAvC,CAAhB,CAAD,EAAoEX,SAAS,CAACY,MAA9E,CAApB,EAA2GN,WAA3G,CAAuH,eAAvH,EAAwIO,YAAxI,CAAqJ,OAArJ,CADsB;AAE5BC,IAAAA,KAAK,EAAEd,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACe,KAAV,CAAgB;AAC5DC,MAAAA,IAAI,EAAEhB,SAAS,CAACY,MAD4C;AAE5DK,MAAAA,KAAK,EAAEjB,SAAS,CAACY;AAF2C,KAAhB,CAAnB,CAApB,EAGFN,WAHE,CAGU,kCAHV,EAG8CO,YAH9C,CAG2DK,SAH3D,CAFqB;AAM5BC,IAAAA,OAAO,EAAEnB,SAAS,CAACU,SAAV,CAAoB,CAACV,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACe,KAAV,CAAgB;AAC9DK,MAAAA,KAAK,EAAEpB,SAAS,CAACY,MAD6C;AAE9DS,MAAAA,GAAG,EAAErB,SAAS,CAACY;AAF+C,KAAhB,CAAnB,CAApB,EAGJN,WAHI,CAGQ,iQAHR,EAG2QO,YAH3Q,CAGwRK,SAHxR;AANmB,GAA9B;AAWA,SAAOd,iBAAP;AACD,CAdM;AAeP,OAAO,IAAIkB,QAAQ,GAAG;AACpB,uBAAqB;AACnBhB,IAAAA,WAAW,EAAE,0JADM;AAEnBiB,IAAAA,IAAI,EAAE,QAFa;AAGnBV,IAAAA,YAAY,EAAE;AACZW,MAAAA,SAAS,EAAE,aADC;AAEZV,MAAAA,KAAK,EAAE,OAFK;AAGZW,MAAAA,GAAG,EAAE,OAHO;AAIZC,MAAAA,KAAK,EAAE,MAJK;AAKZjB,MAAAA,IAAI,EAAE;AALM;AAHK,GADD;AAYpB,kBAAgB;AACdH,IAAAA,WAAW,EAAE,kDADC;AAEdiB,IAAAA,IAAI,EAAE,oBAFQ;AAGdV,IAAAA,YAAY,EAAEK;AAHA,GAZI;AAiBpB,yBAAuB;AACrBZ,IAAAA,WAAW,EAAE,iCADQ;AAErBiB,IAAAA,IAAI,EAAE,QAFe;AAGrBV,IAAAA,YAAY,EAAE;AAHO,GAjBH;AAsBpB,wBAAsB;AACpBP,IAAAA,WAAW,EAAE,gCADO;AAEpBiB,IAAAA,IAAI,EAAE,QAFc;AAGpBV,IAAAA,YAAY,EAAE;AAHM,GAtBF;AA2BpB,yBAAuB;AACrBP,IAAAA,WAAW,EAAE,iCADQ;AAErBiB,IAAAA,IAAI,EAAE,QAFe;AAGrBV,IAAAA,YAAY,EAAE;AAHO,GA3BH;AAgCpB,wBAAsB;AACpBP,IAAAA,WAAW,EAAE,gCADO;AAEpBiB,IAAAA,IAAI,EAAE,QAFc;AAGpBV,IAAAA,YAAY,EAAE;AAHM,GAhCF;AAqCpB,yBAAuB;AACrBP,IAAAA,WAAW,EAAE,iCADQ;AAErBiB,IAAAA,IAAI,EAAE,QAFe;AAGrBV,IAAAA,YAAY,EAAE;AAHO;AArCH,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Spinner) {\n  var DocumentedSpinner = describe(Spinner).availableAt(getAvailableAtBadge('Spinner', 'Visualizations')).description('A Spinner.').usage(\"import { Spinner } from 'grommet';\\n<Spinner/>\");\n  DocumentedSpinner.propTypes = {\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('A fixed size.').defaultValue('small'),\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      dark: PropTypes.string,\n      light: PropTypes.string\n    })]).description('The border color of the Spinner.').defaultValue(undefined),\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      start: PropTypes.string,\n      end: PropTypes.string\n    })]).description(\"When message is a string, the message will be announced for \\n        screen readers once the Spinner is loaded. \\n        When an object, the 'start' message will be announced \\n        as the Spinner appears, and the 'end' message as the spinner closes.\").defaultValue(undefined)\n  };\n  return DocumentedSpinner;\n};\nexport var themeDoc = {\n  'spinner.container': {\n    description: \"Any valid Box prop for the Spinner container. \\n    Including 'color' for the spinner border color and 'size' for the default \\n    size of the Spinner.\",\n    type: 'object',\n    defaultValue: {\n      animation: 'rotateRight',\n      color: 'brand',\n      pad: 'small',\n      round: 'full',\n      size: 'small'\n    }\n  },\n  'spinner.icon': {\n    description: \"An icon or an SVG to use as the default Spinner.\",\n    type: 'ReactElement | SVG',\n    defaultValue: undefined\n  },\n  'spinner.size.xsmall': {\n    description: 'The xsmall size of the Spinner.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'spinner.size.small': {\n    description: 'The small size of the Spinner.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'spinner.size.medium': {\n    description: 'The medium size of the Spinner.',\n    type: 'string',\n    defaultValue: '48px'\n  },\n  'spinner.size.large': {\n    description: 'The large size of the Spinner.',\n    type: 'string',\n    defaultValue: '72px'\n  },\n  'spinner.size.xlarge': {\n    description: 'The xlarge size of the Spinner.',\n    type: 'string',\n    defaultValue: '96px'\n  }\n};"]},"metadata":{},"sourceType":"module"}