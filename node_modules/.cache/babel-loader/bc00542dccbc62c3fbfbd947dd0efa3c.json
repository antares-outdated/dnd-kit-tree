{"ast":null,"code":"import React, { forwardRef, useContext, useEffect, useMemo, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { useForwardedRef } from '../../utils';\nimport { Box } from '../Box';\nvar AnimatedBox = styled(Box).withConfig({\n  displayName: \"Collapsible__AnimatedBox\",\n  componentId: \"sc-15kniua-0\"\n})([\"\", \"\"], function (props) {\n  return (// eslint-disable-next-line max-len\n    \"transition: \" + (\"max-\" + props.dimension + \" \" + props.speedProp + \"ms, opacity \" + props.speedProp + \"ms\") + \";\\n      opacity: \" + (props.open ? 1 : 0) + \";\\n      overflow: \" + (props.animate || !props.open ? 'hidden' : 'visible') + \";\\n      max-\" + props.dimension + \": \" + (props.open ? 'unset' : 0) + \";\\n    \"\n  );\n});\nvar Collapsible = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      direction = _ref.direction,\n      openArg = _ref.open;\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(openArg),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      animate = _useState2[0],\n      setAnimate = _useState2[1];\n\n  var _useState3 = useState(),\n      size = _useState3[0],\n      setSize = _useState3[1];\n\n  var _useState4 = useState(theme.collapsible.minSpeed),\n      speed = _useState4[0],\n      setSpeed = _useState4[1];\n\n  var dimension = useMemo(function () {\n    return direction === 'horizontal' ? 'width' : 'height';\n  }, [direction]);\n  var containerRef = useForwardedRef(ref); // when the caller changes openArg, trigger animation\n\n  useEffect(function () {\n    if (openArg !== open) {\n      setAnimate(true);\n      setOpen(openArg);\n    }\n  }, [open, openArg]); // When we animate, start a timer to clear out the animation when it\n  // has finished.\n\n  useEffect(function () {\n    if (animate) {\n      var timer = setTimeout(function () {\n        setAnimate(false);\n        setSize(undefined);\n        var container = containerRef.current;\n        container.removeAttribute('style');\n      }, speed);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    return undefined;\n  }, [animate, containerRef, speed]);\n  useEffect(function () {\n    if (animate) {\n      var _theme$collapsible = theme.collapsible,\n          minSpeed = _theme$collapsible.minSpeed,\n          baseline = _theme$collapsible.baseline;\n      var container = containerRef.current; // get the desired size by unsetting the max temporarily\n\n      container.style[\"max-\" + dimension] = 'unset';\n      var rect = container.getBoundingClientRect();\n      container.removeAttribute('style');\n      var nextSize = rect[dimension]; // start with the max set to the size we are starting from\n\n      container.style[\"max-\" + dimension] = open ? 0 : nextSize + \"px\";\n      setSize(nextSize);\n      var nextSpeed = Math.max(nextSize / baseline * minSpeed, minSpeed);\n      setSpeed(nextSpeed);\n    }\n  }, [animate, containerRef, dimension, open, theme]);\n  useLayoutEffect(function () {\n    if (animate && size) {\n      var container = containerRef.current;\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          // Change the max to where we want to end up, the transition will\n          // animate to get there. We do this in an animation frame to\n          // give our starter setting a chance to fully render.\n          container.style[\"max-\" + dimension] = open ? size + \"px\" : 0;\n        });\n      });\n    }\n  }, [animate, containerRef, dimension, open, size]);\n  return /*#__PURE__*/React.createElement(AnimatedBox, {\n    \"aria-hidden\": !open,\n    ref: containerRef,\n    open: open,\n    animate: animate,\n    dimension: dimension,\n    speedProp: speed\n  }, open || animate ? children : null);\n});\nCollapsible.displayName = 'Collapsible';\nvar CollapsibleDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CollapsibleDoc = require('./doc').doc(Collapsible);\n}\n\nvar CollapsibleWrapper = CollapsibleDoc || Collapsible;\nexport { CollapsibleWrapper as Collapsible };","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Collapsible/Collapsible.js"],"names":["React","forwardRef","useContext","useEffect","useMemo","useState","styled","ThemeContext","useLayoutEffect","defaultProps","useForwardedRef","Box","AnimatedBox","withConfig","displayName","componentId","props","dimension","speedProp","open","animate","Collapsible","_ref","ref","children","direction","openArg","theme","_useState","setOpen","_useState2","setAnimate","_useState3","size","setSize","_useState4","collapsible","minSpeed","speed","setSpeed","containerRef","timer","setTimeout","undefined","container","current","removeAttribute","clearTimeout","_theme$collapsible","baseline","style","rect","getBoundingClientRect","nextSize","nextSpeed","Math","max","requestAnimationFrame","createElement","CollapsibleDoc","process","env","NODE_ENV","require","doc","CollapsibleWrapper"],"mappings":"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","sourcesContent":["import React, { forwardRef, useContext, useEffect, useMemo, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useLayoutEffect } from '../../utils/use-isomorphic-layout-effect';\nimport { defaultProps } from '../../default-props';\nimport { useForwardedRef } from '../../utils';\nimport { Box } from '../Box';\nvar AnimatedBox = styled(Box).withConfig({\n  displayName: \"Collapsible__AnimatedBox\",\n  componentId: \"sc-15kniua-0\"\n})([\"\", \"\"], function (props) {\n  return (// eslint-disable-next-line max-len\n    \"transition: \" + (\"max-\" + props.dimension + \" \" + props.speedProp + \"ms, opacity \" + props.speedProp + \"ms\") + \";\\n      opacity: \" + (props.open ? 1 : 0) + \";\\n      overflow: \" + (props.animate || !props.open ? 'hidden' : 'visible') + \";\\n      max-\" + props.dimension + \": \" + (props.open ? 'unset' : 0) + \";\\n    \"\n  );\n});\nvar Collapsible = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      direction = _ref.direction,\n      openArg = _ref.open;\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(openArg),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      animate = _useState2[0],\n      setAnimate = _useState2[1];\n\n  var _useState3 = useState(),\n      size = _useState3[0],\n      setSize = _useState3[1];\n\n  var _useState4 = useState(theme.collapsible.minSpeed),\n      speed = _useState4[0],\n      setSpeed = _useState4[1];\n\n  var dimension = useMemo(function () {\n    return direction === 'horizontal' ? 'width' : 'height';\n  }, [direction]);\n  var containerRef = useForwardedRef(ref); // when the caller changes openArg, trigger animation\n\n  useEffect(function () {\n    if (openArg !== open) {\n      setAnimate(true);\n      setOpen(openArg);\n    }\n  }, [open, openArg]); // When we animate, start a timer to clear out the animation when it\n  // has finished.\n\n  useEffect(function () {\n    if (animate) {\n      var timer = setTimeout(function () {\n        setAnimate(false);\n        setSize(undefined);\n        var container = containerRef.current;\n        container.removeAttribute('style');\n      }, speed);\n      return function () {\n        return clearTimeout(timer);\n      };\n    }\n\n    return undefined;\n  }, [animate, containerRef, speed]);\n  useEffect(function () {\n    if (animate) {\n      var _theme$collapsible = theme.collapsible,\n          minSpeed = _theme$collapsible.minSpeed,\n          baseline = _theme$collapsible.baseline;\n      var container = containerRef.current; // get the desired size by unsetting the max temporarily\n\n      container.style[\"max-\" + dimension] = 'unset';\n      var rect = container.getBoundingClientRect();\n      container.removeAttribute('style');\n      var nextSize = rect[dimension]; // start with the max set to the size we are starting from\n\n      container.style[\"max-\" + dimension] = open ? 0 : nextSize + \"px\";\n      setSize(nextSize);\n      var nextSpeed = Math.max(nextSize / baseline * minSpeed, minSpeed);\n      setSpeed(nextSpeed);\n    }\n  }, [animate, containerRef, dimension, open, theme]);\n  useLayoutEffect(function () {\n    if (animate && size) {\n      var container = containerRef.current;\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          // Change the max to where we want to end up, the transition will\n          // animate to get there. We do this in an animation frame to\n          // give our starter setting a chance to fully render.\n          container.style[\"max-\" + dimension] = open ? size + \"px\" : 0;\n        });\n      });\n    }\n  }, [animate, containerRef, dimension, open, size]);\n  return /*#__PURE__*/React.createElement(AnimatedBox, {\n    \"aria-hidden\": !open,\n    ref: containerRef,\n    open: open,\n    animate: animate,\n    dimension: dimension,\n    speedProp: speed\n  }, open || animate ? children : null);\n});\nCollapsible.displayName = 'Collapsible';\nvar CollapsibleDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CollapsibleDoc = require('./doc').doc(Collapsible);\n}\n\nvar CollapsibleWrapper = CollapsibleDoc || Collapsible;\nexport { CollapsibleWrapper as Collapsible };"]},"metadata":{},"sourceType":"module"}