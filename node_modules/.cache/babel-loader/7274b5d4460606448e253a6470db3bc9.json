{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(RadioButton) {\n  var DocumentedRadioButton = describe(RadioButton).availableAt(getAvailableAtBadge('RadioButton', 'Input')).description('A radio button control.').details(\"RadioButton should typically not be used directly.\\n      Instead, use RadioButtonGroup.\").usage(\"import { RadioButton } from 'grommet';\\n<RadioButton />\").intrinsicElement('input');\n  DocumentedRadioButton.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    checked: PropTypes.bool.description('Same as React <input checked={} />'),\n    children: PropTypes.func.description(\"Function that will be called to render the visual representation.\\n      It will be passed an object indicating whether the button is checked. It\\n      should return a react element.\\n      For example:\\n      `children={({ checked }) => <Box ...>{...}</Box>}`\\n      \"),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\nwith the same name so form submissions work.\"),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/>\\n       element.\").isRequired,\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the radio button. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\")\n  };\n  return DocumentedRadioButton;\n};\nexport var themeDoc = {\n  'global.colors.control': {\n    description: \"The default color of the border surrounding \\n    the checked icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ dark: 'accent-1', light: 'brand'}\"\n  },\n  'radioButton.border.color': {\n    description: 'The color of the border of the Radio Button.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}\"\n  },\n  'radioButton.border.width': {\n    description: 'The width size of the border of the RadioButton.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'radioButton.check.background.color': {\n    description: 'The background color of the checked icon in the RadioButton.',\n    type: 'string | {dark: string, light: string}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.color': {\n    description: 'The color of the checked icon in the RadioButton.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.extend': {\n    description: 'Any additional style for the checked RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.check.radius': {\n    description: 'The border-radius of the RadioButton.',\n    type: 'string',\n    defaultValue: '100%'\n  },\n  'radioButton.color': {\n    description: \"The color of the border surrounding the checked \\n    icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.container.extend': {\n    description: \"Any additional style for the container around \\n    the radio button and its label.\",\n    type: 'string | (props) => {}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.extend': {\n    description: 'Any additional style for the radio button itself.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.font.weight': {\n    description: 'The font weight of the label.',\n    type: 'number | string',\n    defaultValue: undefined\n  },\n  'radioButton.gap': {\n    description: 'The gap between the label and the RadioButton itself.',\n    type: 'string',\n    defaultValue: 'small'\n  },\n  'radioButton.hover.background.color': {\n    description: \"The background color of the Box surrounding the RadioButton\\n    when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.hover.border.color': {\n    description: \"The color of the RadioButton border when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: white, light: black}'\n  },\n  'radioButton.icon.extend': {\n    description: 'Any additional style for the RadioButton icon.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.icon.size': {\n    description: 'The size of the icon in the RadioButton.',\n    type: 'string'\n  },\n  'radioButton.icons.circle': {\n    description: 'The icon to replace the inner checked circle.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'radioButton.size': {\n    description: 'The size of the RadioButton.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/RadioButton/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","RadioButton","DocumentedRadioButton","availableAt","description","details","usage","intrinsicElement","propTypes","a11yTitle","string","checked","bool","children","func","disabled","id","label","node","name","isRequired","onChange","themeDoc","type","defaultValue","undefined"],"mappings":"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","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(RadioButton) {\n  var DocumentedRadioButton = describe(RadioButton).availableAt(getAvailableAtBadge('RadioButton', 'Input')).description('A radio button control.').details(\"RadioButton should typically not be used directly.\\n      Instead, use RadioButtonGroup.\").usage(\"import { RadioButton } from 'grommet';\\n<RadioButton />\").intrinsicElement('input');\n  DocumentedRadioButton.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    checked: PropTypes.bool.description('Same as React <input checked={} />'),\n    children: PropTypes.func.description(\"Function that will be called to render the visual representation.\\n      It will be passed an object indicating whether the button is checked. It\\n      should return a react element.\\n      For example:\\n      `children={({ checked }) => <Box ...>{...}</Box>}`\\n      \"),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\nwith the same name so form submissions work.\"),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/>\\n       element.\").isRequired,\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the radio button. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\")\n  };\n  return DocumentedRadioButton;\n};\nexport var themeDoc = {\n  'global.colors.control': {\n    description: \"The default color of the border surrounding \\n    the checked icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ dark: 'accent-1', light: 'brand'}\"\n  },\n  'radioButton.border.color': {\n    description: 'The color of the border of the Radio Button.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}\"\n  },\n  'radioButton.border.width': {\n    description: 'The width size of the border of the RadioButton.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'radioButton.check.background.color': {\n    description: 'The background color of the checked icon in the RadioButton.',\n    type: 'string | {dark: string, light: string}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.color': {\n    description: 'The color of the checked icon in the RadioButton.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.extend': {\n    description: 'Any additional style for the checked RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.check.radius': {\n    description: 'The border-radius of the RadioButton.',\n    type: 'string',\n    defaultValue: '100%'\n  },\n  'radioButton.color': {\n    description: \"The color of the border surrounding the checked \\n    icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.container.extend': {\n    description: \"Any additional style for the container around \\n    the radio button and its label.\",\n    type: 'string | (props) => {}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.extend': {\n    description: 'Any additional style for the radio button itself.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.font.weight': {\n    description: 'The font weight of the label.',\n    type: 'number | string',\n    defaultValue: undefined\n  },\n  'radioButton.gap': {\n    description: 'The gap between the label and the RadioButton itself.',\n    type: 'string',\n    defaultValue: 'small'\n  },\n  'radioButton.hover.background.color': {\n    description: \"The background color of the Box surrounding the RadioButton\\n    when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.hover.border.color': {\n    description: \"The color of the RadioButton border when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: white, light: black}'\n  },\n  'radioButton.icon.extend': {\n    description: 'Any additional style for the RadioButton icon.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.icon.size': {\n    description: 'The size of the icon in the RadioButton.',\n    type: 'string'\n  },\n  'radioButton.icons.circle': {\n    description: 'The icon to replace the inner checked circle.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'radioButton.size': {\n    description: 'The size of the RadioButton.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n};"]},"metadata":{},"sourceType":"module"}