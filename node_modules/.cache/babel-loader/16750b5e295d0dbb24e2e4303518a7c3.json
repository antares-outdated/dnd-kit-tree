{"ast":null,"code":"export var themeDocUtils = {\n  // 'The possible breakpoints that could affect border, direction, gap,\n  // margin, pad, and round.',\n  breakpointStyle: function breakpointStyle(description) {\n    return {\n      'global.breakpoints': {\n        description: description,\n        type: 'object',\n        defaultValue: \"{\\n    small: {\\n      value: '768px',\\n      borderSize: {\\n        xsmall: '1px',\\n        small: '2px',\\n        medium: '4px',\\n        large: '6px',\\n        xlarge: '12px',\\n      },\\n      edgeSize: {\\n        none: '0px',\\n        hair: '1px',\\n        xxsmall: '2px',\\n        xsmall: '3px',\\n        small: '6px',\\n        medium: '12px',\\n        large: '24px',\\n        xlarge: '48px',\\n      },\\n      size: {\\n        xxsmall: '24px',\\n        xsmall: '48px',\\n        small: '96px',\\n        medium: '192px',\\n        large: '384px',\\n        xlarge: '768px',\\n        full: '100%',\\n      },\\n    },\\n    medium: {\\n      value: '1536px',\\n    },\\n    large: {},\\n  }\"\n      }\n    };\n  },\n  disabledStyle: {\n    'global.control.disabled.opacity': {\n      description: 'The opacity when a component is disabled.',\n      type: 'number',\n      defaultValue: 0.3\n    }\n  },\n  edgeStyle: function edgeStyle(description) {\n    return {\n      'global.edgeSize': {\n        description: description,\n        type: 'object',\n        defaultValue: \"{\\n    edgeSize: {\\n      none: '0px',\\n      hair: '1px',\\n      xxsmall: '3px',\\n      xsmall: '6px',\\n      small: '12px',\\n      medium: '24px',\\n      large: '48px',\\n      xlarge: '96px',\\n      responsiveBreakpoint: 'small',\\n    },\\n  }\"\n      }\n    };\n  },\n  focusStyle: {\n    'global.focus.border.color': {\n      description: 'The border color of the component when in focus.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: 'focus'\n    },\n    'global.focus.outline.color': {\n      description: 'The outline color around the component when in focus.',\n      type: 'string | { dark: string, light: string }'\n    },\n    'global.focus.outline.size': {\n      description: 'The size of the outline around the component when in focus.',\n      type: 'string'\n    },\n    'global.focus.shadow.color': {\n      description: 'The shadow color around the component when in focus.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: 'focus'\n    },\n    'global.focus.shadow.size': {\n      description: 'The size of the shadow around the component when in focus.',\n      type: 'string',\n      defaultValue: '2px'\n    }\n  },\n  iconColor: {\n    'global.colors.icon': {\n      description: 'The color of a given icon.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: '{ dark: #f8f8f8, light: #666666 }'\n    }\n  },\n  inputStyle: {\n    'global.input.font.height': {\n      description: 'The line-height of the text.',\n      type: 'string',\n      defaultValue: undefined\n    },\n    'global.input.font.size': {\n      description: 'The size of the text.',\n      type: 'string',\n      defaultValue: undefined\n    },\n    'global.input.font.weight': {\n      description: \"The font-weight of the text. This value will only be \\n      applied if global.input.weight is undefined.\",\n      type: 'number | string',\n      defaultValue: 600\n    },\n    'global.input.weight': {\n      description: \"This value has been deprecated and replaced by \\n      global.input.font.weight.\",\n      type: 'number | string',\n      defaultValue: undefined\n    },\n    'global.input.padding': {\n      description: 'The padding of the text.',\n      type: \"string | { top: string, bottom: string, left: string, right: \\n        string, horizontal: string, vertical: string }\",\n      defaultValue: '12px'\n    },\n    'global.input.extend': {\n      description: 'Any additional style for an input.',\n      type: 'string | (props) => {}',\n      defaultValue: undefined\n    }\n  },\n  placeholderStyle: {\n    'global.colors.placeholder': {\n      description: 'The placeholder color used for the component.',\n      type: 'string',\n      defaultValue: '#AAAAAA'\n    }\n  },\n  responsiveBreakpoint: function responsiveBreakpoint(description) {\n    return {\n      'global.edgeSize.responsiveBreakpoint': {\n        description: description,\n        type: 'string',\n        defaultValue: 'small'\n      }\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/utils/themeDocUtils.js"],"names":["themeDocUtils","breakpointStyle","description","type","defaultValue","disabledStyle","edgeStyle","focusStyle","iconColor","inputStyle","undefined","placeholderStyle","responsiveBreakpoint"],"mappings":"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","sourcesContent":["export var themeDocUtils = {\n  // 'The possible breakpoints that could affect border, direction, gap,\n  // margin, pad, and round.',\n  breakpointStyle: function breakpointStyle(description) {\n    return {\n      'global.breakpoints': {\n        description: description,\n        type: 'object',\n        defaultValue: \"{\\n    small: {\\n      value: '768px',\\n      borderSize: {\\n        xsmall: '1px',\\n        small: '2px',\\n        medium: '4px',\\n        large: '6px',\\n        xlarge: '12px',\\n      },\\n      edgeSize: {\\n        none: '0px',\\n        hair: '1px',\\n        xxsmall: '2px',\\n        xsmall: '3px',\\n        small: '6px',\\n        medium: '12px',\\n        large: '24px',\\n        xlarge: '48px',\\n      },\\n      size: {\\n        xxsmall: '24px',\\n        xsmall: '48px',\\n        small: '96px',\\n        medium: '192px',\\n        large: '384px',\\n        xlarge: '768px',\\n        full: '100%',\\n      },\\n    },\\n    medium: {\\n      value: '1536px',\\n    },\\n    large: {},\\n  }\"\n      }\n    };\n  },\n  disabledStyle: {\n    'global.control.disabled.opacity': {\n      description: 'The opacity when a component is disabled.',\n      type: 'number',\n      defaultValue: 0.3\n    }\n  },\n  edgeStyle: function edgeStyle(description) {\n    return {\n      'global.edgeSize': {\n        description: description,\n        type: 'object',\n        defaultValue: \"{\\n    edgeSize: {\\n      none: '0px',\\n      hair: '1px',\\n      xxsmall: '3px',\\n      xsmall: '6px',\\n      small: '12px',\\n      medium: '24px',\\n      large: '48px',\\n      xlarge: '96px',\\n      responsiveBreakpoint: 'small',\\n    },\\n  }\"\n      }\n    };\n  },\n  focusStyle: {\n    'global.focus.border.color': {\n      description: 'The border color of the component when in focus.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: 'focus'\n    },\n    'global.focus.outline.color': {\n      description: 'The outline color around the component when in focus.',\n      type: 'string | { dark: string, light: string }'\n    },\n    'global.focus.outline.size': {\n      description: 'The size of the outline around the component when in focus.',\n      type: 'string'\n    },\n    'global.focus.shadow.color': {\n      description: 'The shadow color around the component when in focus.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: 'focus'\n    },\n    'global.focus.shadow.size': {\n      description: 'The size of the shadow around the component when in focus.',\n      type: 'string',\n      defaultValue: '2px'\n    }\n  },\n  iconColor: {\n    'global.colors.icon': {\n      description: 'The color of a given icon.',\n      type: 'string | { dark: string, light: string }',\n      defaultValue: '{ dark: #f8f8f8, light: #666666 }'\n    }\n  },\n  inputStyle: {\n    'global.input.font.height': {\n      description: 'The line-height of the text.',\n      type: 'string',\n      defaultValue: undefined\n    },\n    'global.input.font.size': {\n      description: 'The size of the text.',\n      type: 'string',\n      defaultValue: undefined\n    },\n    'global.input.font.weight': {\n      description: \"The font-weight of the text. This value will only be \\n      applied if global.input.weight is undefined.\",\n      type: 'number | string',\n      defaultValue: 600\n    },\n    'global.input.weight': {\n      description: \"This value has been deprecated and replaced by \\n      global.input.font.weight.\",\n      type: 'number | string',\n      defaultValue: undefined\n    },\n    'global.input.padding': {\n      description: 'The padding of the text.',\n      type: \"string | { top: string, bottom: string, left: string, right: \\n        string, horizontal: string, vertical: string }\",\n      defaultValue: '12px'\n    },\n    'global.input.extend': {\n      description: 'Any additional style for an input.',\n      type: 'string | (props) => {}',\n      defaultValue: undefined\n    }\n  },\n  placeholderStyle: {\n    'global.colors.placeholder': {\n      description: 'The placeholder color used for the component.',\n      type: 'string',\n      defaultValue: '#AAAAAA'\n    }\n  },\n  responsiveBreakpoint: function responsiveBreakpoint(description) {\n    return {\n      'global.edgeSize.responsiveBreakpoint': {\n        description: description,\n        type: 'string',\n        defaultValue: 'small'\n      }\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}