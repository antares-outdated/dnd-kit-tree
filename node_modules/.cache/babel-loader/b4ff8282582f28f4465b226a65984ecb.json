{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Video) {\n  var DocumentedVideo = describe(Video).availableAt(getAvailableAtBadge('Video', 'Media')).description('A video player.').usage(\"import { Video } from 'grommet';\\n<Video />\").intrinsicElement('video');\n  DocumentedVideo.propTypes = _extends({}, genericProps, {\n    autoPlay: PropTypes.bool.description('Enables automatic playback of the video as soon as it is loaded.'),\n    controls: PropTypes.oneOf([false, 'over', 'below']).description('Whether to show playback controls and where to place them.').defaultValue('over'),\n    fit: PropTypes.oneOf(['cover', 'contain']).description('How the image fills its container.'),\n    loop: PropTypes.bool.description('Enables continuous video looping.'),\n    mute: PropTypes.bool.description('Enables video muting. This option is best used with the autoPlay flag.'),\n    messages: PropTypes.shape({\n      closeMenu: PropTypes.string,\n      fullScreen: PropTypes.string,\n      progressMeter: PropTypes.string,\n      openMenu: PropTypes.string,\n      pauseButton: PropTypes.string,\n      playButton: PropTypes.string,\n      scrubber: PropTypes.string,\n      volumeDown: PropTypes.string,\n      volumeUp: PropTypes.string\n    }).description(\"Custom messages. Used for accessibility by screen readers.\")\n  });\n  return DocumentedVideo;\n};\nexport var themeDoc = _extends({}, themeDocUtils.responsiveBreakpoint('The actual breakpoint to trigger changes in the video component layout.'), {\n  'global.edgeSize.xsmall': {\n    description: 'The width of the video scrubber.',\n    type: 'object',\n    defaultValue: '6px'\n  },\n  'video.captions.background': {\n    description: 'The caption background color of the video ',\n    type: 'string',\n    defaultValue: 'rgba(0, 0, 0, 0.7)'\n  },\n  'video.icons.closedCaption': {\n    description: 'The icon to use for the caption.',\n    type: 'React.Element',\n    defaultValue: '<ClosedCaption />'\n  },\n  'video.icons.configure': {\n    description: 'The icon to use for the configuration action.',\n    type: 'React.Element',\n    defaultValue: '<Actions />'\n  },\n  'video.icons.fullScreen': {\n    description: 'The icon to use for viewing the video in full screen.',\n    type: 'React.Element',\n    defaultValue: '<Expand />'\n  },\n  'video.icons.pause': {\n    description: 'The icon to use for pausing the video.',\n    type: 'React.Element',\n    defaultValue: '<Pause />'\n  },\n  'video.icons.play': {\n    description: 'The icon to use for playing the video.',\n    type: 'React.Element',\n    defaultValue: '<Play />'\n  },\n  'video.icons.reduceVolume': {\n    description: 'The icon to use for the action of lowering the volume.',\n    type: 'React.Element',\n    defaultValue: '<VolumeLow />'\n  },\n  'video.icons.volume': {\n    description: 'The icon to use for the action of raising the volume.',\n    type: 'React.Element',\n    defaultValue: '<Volume />'\n  },\n  'video.scrubber.color': {\n    description: 'The background color of the video scrubber.',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'video.extend': {\n    description: 'Any additional style for Video.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n});","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Video/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","themeDocUtils","doc","Video","DocumentedVideo","availableAt","description","usage","intrinsicElement","propTypes","autoPlay","bool","controls","oneOf","defaultValue","fit","loop","mute","messages","shape","closeMenu","string","fullScreen","progressMeter","openMenu","pauseButton","playButton","scrubber","volumeDown","volumeUp","themeDoc","responsiveBreakpoint","type","undefined"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Video) {\n  var DocumentedVideo = describe(Video).availableAt(getAvailableAtBadge('Video', 'Media')).description('A video player.').usage(\"import { Video } from 'grommet';\\n<Video />\").intrinsicElement('video');\n  DocumentedVideo.propTypes = _extends({}, genericProps, {\n    autoPlay: PropTypes.bool.description('Enables automatic playback of the video as soon as it is loaded.'),\n    controls: PropTypes.oneOf([false, 'over', 'below']).description('Whether to show playback controls and where to place them.').defaultValue('over'),\n    fit: PropTypes.oneOf(['cover', 'contain']).description('How the image fills its container.'),\n    loop: PropTypes.bool.description('Enables continuous video looping.'),\n    mute: PropTypes.bool.description('Enables video muting. This option is best used with the autoPlay flag.'),\n    messages: PropTypes.shape({\n      closeMenu: PropTypes.string,\n      fullScreen: PropTypes.string,\n      progressMeter: PropTypes.string,\n      openMenu: PropTypes.string,\n      pauseButton: PropTypes.string,\n      playButton: PropTypes.string,\n      scrubber: PropTypes.string,\n      volumeDown: PropTypes.string,\n      volumeUp: PropTypes.string\n    }).description(\"Custom messages. Used for accessibility by screen readers.\")\n  });\n  return DocumentedVideo;\n};\nexport var themeDoc = _extends({}, themeDocUtils.responsiveBreakpoint('The actual breakpoint to trigger changes in the video component layout.'), {\n  'global.edgeSize.xsmall': {\n    description: 'The width of the video scrubber.',\n    type: 'object',\n    defaultValue: '6px'\n  },\n  'video.captions.background': {\n    description: 'The caption background color of the video ',\n    type: 'string',\n    defaultValue: 'rgba(0, 0, 0, 0.7)'\n  },\n  'video.icons.closedCaption': {\n    description: 'The icon to use for the caption.',\n    type: 'React.Element',\n    defaultValue: '<ClosedCaption />'\n  },\n  'video.icons.configure': {\n    description: 'The icon to use for the configuration action.',\n    type: 'React.Element',\n    defaultValue: '<Actions />'\n  },\n  'video.icons.fullScreen': {\n    description: 'The icon to use for viewing the video in full screen.',\n    type: 'React.Element',\n    defaultValue: '<Expand />'\n  },\n  'video.icons.pause': {\n    description: 'The icon to use for pausing the video.',\n    type: 'React.Element',\n    defaultValue: '<Pause />'\n  },\n  'video.icons.play': {\n    description: 'The icon to use for playing the video.',\n    type: 'React.Element',\n    defaultValue: '<Play />'\n  },\n  'video.icons.reduceVolume': {\n    description: 'The icon to use for the action of lowering the volume.',\n    type: 'React.Element',\n    defaultValue: '<VolumeLow />'\n  },\n  'video.icons.volume': {\n    description: 'The icon to use for the action of raising the volume.',\n    type: 'React.Element',\n    defaultValue: '<Volume />'\n  },\n  'video.scrubber.color': {\n    description: 'The background color of the video scrubber.',\n    type: 'string',\n    defaultValue: 'light-4'\n  },\n  'video.extend': {\n    description: 'Any additional style for Video.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n});"]},"metadata":{},"sourceType":"module"}