{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, MARGIN_SIZES } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Text) {\n  var DocumentedText = describe(Text).availableAt(getAvailableAtBadge('Text', 'Type')).description('Arbitrary text.').usage(\"import { Text } from 'grommet';\\n<Text />\").intrinsicElement('span');\n  DocumentedText.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('A color identifier to use for the text color.'),\n    margin: PropTypes.oneOfType([PropTypes.oneOf(['none'].concat(MARGIN_SIZES)), PropTypes.shape({\n      bottom: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      end: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      horizontal: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      left: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      right: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      start: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      top: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      vertical: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string])\n    }), PropTypes.string]).description(\"The amount of margin around the component. An object can be \\n    specified to distinguish horizontal margin, vertical margin, and margin on \\n    a particular side. For vertical margin to be applied, Text needs to be \\n    contained within a layout component (such as Box or a generic div) or \\n    behave as a div (by applying as=\\\"div\\\" or a display style of \\n    inline-block).\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge', '2xl', '3xl', '4xl', '5xl', '6xl']), PropTypes.string]).description(\"The font size and line space height of the text.\").defaultValue('medium'),\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag to use for the element. NOTE: This is deprecated in favor\\n         of indicating the DOM tag via the 'as' property.\"),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).description(\"The DOM tag or react component to use for the element.\").defaultValue('span'),\n    textAlign: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the text inside the component.').defaultValue('start'),\n    truncate: PropTypes.bool.description(\"Restrict the text to a single line and truncate with ellipsis if it\\nis too long to all fit. For truncate to be applied, Text needs to be \\ncontained within a layout component (such as Box or a generic div).\").defaultValue(false),\n    weight: PropTypes.oneOfType([PropTypes.oneOf(['normal', 'bold']), PropTypes.number]).description('Font weight'),\n    wordBreak: PropTypes.oneOf(['normal', 'break-all', 'keep-all', 'break-word']).description('Whether words should break when reaching the end of a line.').defaultValue('normal')\n  });\n  return DocumentedText;\n};\nexport var themeDoc = _extends({\n  'global.colors.text': {\n    description: \"The text color used for Text. In order for this to take \\n    effect, global.colors.background needs to be defined.\",\n    type: 'object | { dark: string, light: string }',\n    defaultValue: \"{ dark: '#f8f8f8', light: '#444444' }\"\n  },\n  'text.font.family': {\n    description: 'The font family to use for Text.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\nline-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'text.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n}, themeDocUtils.edgeStyle('The possible sizes for margin.'));","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Text/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","colorPropType","genericProps","MARGIN_SIZES","getAvailableAtBadge","themeDocUtils","doc","Text","DocumentedText","availableAt","description","usage","intrinsicElement","propTypes","color","margin","oneOfType","oneOf","concat","shape","bottom","string","end","horizontal","left","right","start","top","vertical","size","defaultValue","tag","func","as","element","textAlign","truncate","bool","weight","number","wordBreak","themeDoc","type","undefined","text","edgeStyle"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { colorPropType, genericProps, MARGIN_SIZES } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(Text) {\n  var DocumentedText = describe(Text).availableAt(getAvailableAtBadge('Text', 'Type')).description('Arbitrary text.').usage(\"import { Text } from 'grommet';\\n<Text />\").intrinsicElement('span');\n  DocumentedText.propTypes = _extends({}, genericProps, {\n    color: colorPropType.description('A color identifier to use for the text color.'),\n    margin: PropTypes.oneOfType([PropTypes.oneOf(['none'].concat(MARGIN_SIZES)), PropTypes.shape({\n      bottom: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      end: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      horizontal: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      left: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      right: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      start: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      top: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string]),\n      vertical: PropTypes.oneOfType([PropTypes.oneOf(MARGIN_SIZES), PropTypes.string])\n    }), PropTypes.string]).description(\"The amount of margin around the component. An object can be \\n    specified to distinguish horizontal margin, vertical margin, and margin on \\n    a particular side. For vertical margin to be applied, Text needs to be \\n    contained within a layout component (such as Box or a generic div) or \\n    behave as a div (by applying as=\\\"div\\\" or a display style of \\n    inline-block).\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge', '2xl', '3xl', '4xl', '5xl', '6xl']), PropTypes.string]).description(\"The font size and line space height of the text.\").defaultValue('medium'),\n    tag: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).description(\"The DOM tag to use for the element. NOTE: This is deprecated in favor\\n         of indicating the DOM tag via the 'as' property.\"),\n    as: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).description(\"The DOM tag or react component to use for the element.\").defaultValue('span'),\n    textAlign: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the text inside the component.').defaultValue('start'),\n    truncate: PropTypes.bool.description(\"Restrict the text to a single line and truncate with ellipsis if it\\nis too long to all fit. For truncate to be applied, Text needs to be \\ncontained within a layout component (such as Box or a generic div).\").defaultValue(false),\n    weight: PropTypes.oneOfType([PropTypes.oneOf(['normal', 'bold']), PropTypes.number]).description('Font weight'),\n    wordBreak: PropTypes.oneOf(['normal', 'break-all', 'keep-all', 'break-word']).description('Whether words should break when reaching the end of a line.').defaultValue('normal')\n  });\n  return DocumentedText;\n};\nexport var themeDoc = _extends({\n  'global.colors.text': {\n    description: \"The text color used for Text. In order for this to take \\n    effect, global.colors.background needs to be defined.\",\n    type: 'object | { dark: string, light: string }',\n    defaultValue: \"{ dark: '#f8f8f8', light: '#444444' }\"\n  },\n  'text.font.family': {\n    description: 'The font family to use for Text.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\nline-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'text.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n}, themeDocUtils.edgeStyle('The possible sizes for margin.'));"]},"metadata":{},"sourceType":"module"}