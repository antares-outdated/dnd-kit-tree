{"ast":null,"code":"import _toConsumableArray from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/antaresofficial/Desktop/tree/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\antaresofficial\\\\Desktop\\\\tree\\\\src\\\\components\\\\SortableTree.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragOverlay, LayoutMeasuringStrategy, defaultDropAnimation } from \"@dnd-kit/core\";\nimport { SortableContext, arrayMove, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { buildTree, flattenTree, getProjection, getChildCount, removeItem, removeChildrenOf, setProperty } from \"./utilities\";\nimport { sortableTreeKeyboardCoordinates } from \"./keyboardCoordinates\";\nimport { TreeItem, SortableTreeItem } from \"./\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initialItems = [{\n  id: \"Home\",\n  children: []\n}, {\n  id: \"Collections\",\n  children: [{\n    id: \"Spring\",\n    children: []\n  }, {\n    id: \"Summer\",\n    children: []\n  }, {\n    id: \"Fall\",\n    children: []\n  }, {\n    id: \"Winter\",\n    children: []\n  }]\n}, {\n  id: \"About Us\",\n  children: []\n}, {\n  id: \"My Account\",\n  children: [{\n    id: \"Addresses\",\n    children: []\n  }, {\n    id: \"Order History\",\n    children: []\n  }]\n}];\nvar layoutMeasuring = {\n  strategy: LayoutMeasuringStrategy.Always\n};\n\nvar dropAnimation = _objectSpread(_objectSpread({}, defaultDropAnimation), {}, {\n  dragSourceOpacity: 0.5\n});\n\nexport default function SortableTree(_ref) {\n  _s();\n\n  var _this = this;\n\n  var collapsible = _ref.collapsible,\n      _ref$defaultItems = _ref.defaultItems,\n      defaultItems = _ref$defaultItems === void 0 ? initialItems : _ref$defaultItems,\n      indicator = _ref.indicator,\n      _ref$indentationWidth = _ref.indentationWidth,\n      indentationWidth = _ref$indentationWidth === void 0 ? 50 : _ref$indentationWidth,\n      removable = _ref.removable;\n\n  var _useState = useState(function () {\n    return defaultItems;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeId = _useState4[0],\n      setActiveId = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      overId = _useState6[0],\n      setOverId = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      offsetLeft = _useState8[0],\n      setOffsetLeft = _useState8[1];\n\n  var flattenedItems = useMemo(function () {\n    var flattenedTree = flattenTree(items);\n    var collapsedItems = flattenedTree.reduce(function (acc, _ref2) {\n      var children = _ref2.children,\n          collapsed = _ref2.collapsed,\n          id = _ref2.id;\n      return collapsed && children.length ? [].concat(_toConsumableArray(acc), [id]) : acc;\n    }, []);\n    return removeChildrenOf(flattenedTree, activeId ? [activeId].concat(_toConsumableArray(collapsedItems)) : collapsedItems);\n  }, [activeId, items]);\n  var projected = activeId && overId ? getProjection(flattenedItems, activeId, overId, offsetLeft, indentationWidth) : null;\n  var sensorContext = useRef({\n    items: flattenedItems,\n    offset: offsetLeft\n  });\n\n  var _useState9 = useState(function () {\n    return sortableTreeKeyboardCoordinates(sensorContext, indentationWidth);\n  }),\n      _useState10 = _slicedToArray(_useState9, 1),\n      coordinateGetter = _useState10[0];\n\n  var sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: coordinateGetter\n  }));\n  var sortedIds = useMemo(function () {\n    return flattenedItems.map(function (_ref3) {\n      var id = _ref3.id;\n      return id;\n    });\n  }, [flattenedItems]);\n  var activeItem = activeId ? flattenedItems.find(function (_ref4) {\n    var id = _ref4.id;\n    return id === activeId;\n  }) : null;\n  useEffect(function () {\n    sensorContext.current = {\n      items: flattenedItems,\n      offset: offsetLeft\n    };\n  }, [flattenedItems, offsetLeft]);\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    modifiers: indicator ? [adjustTranslate] : undefined,\n    collisionDetection: closestCenter,\n    layoutMeasuring: layoutMeasuring,\n    onDragStart: handleDragStart,\n    onDragMove: handleDragMove,\n    onDragOver: handleDragOver,\n    onDragEnd: handleDragEnd,\n    onDragCancel: handleDragCancel,\n    children: /*#__PURE__*/_jsxDEV(SortableContext, {\n      items: sortedIds,\n      strategy: verticalListSortingStrategy,\n      children: [flattenedItems.map(function (_ref5) {\n        var id = _ref5.id,\n            children = _ref5.children,\n            collapsed = _ref5.collapsed,\n            depth = _ref5.depth;\n        return /*#__PURE__*/_jsxDEV(SortableTreeItem, {\n          id: id,\n          value: id,\n          depth: id === activeId && projected ? projected.depth : depth,\n          indentationWidth: indentationWidth,\n          indicator: indicator,\n          collapsed: Boolean(collapsed && children.length),\n          onCollapse: collapsible && children.length ? function () {\n            return handleCollapse(id);\n          } : undefined,\n          onRemove: removable ? function () {\n            return handleRemove(id);\n          } : undefined\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, _this);\n      }), /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(DragOverlay, {\n        dropAnimation: dropAnimation,\n        children: activeId && activeItem ? /*#__PURE__*/_jsxDEV(TreeItem, {\n          depth: activeItem.depth,\n          clone: true,\n          childCount: getChildCount(items, activeId) + 1,\n          value: activeId,\n          indentationWidth: indentationWidth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), document.body)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n\n  function handleDragStart(_ref6) {\n    var id = _ref6.active.id;\n    setActiveId(id);\n    setOverId(id);\n    document.body.style.setProperty(\"cursor\", \"grabbing\");\n  }\n\n  function handleDragMove(_ref7) {\n    var delta = _ref7.delta;\n    setOffsetLeft(delta.x);\n  }\n\n  function handleDragOver(_ref8) {\n    var _over$id;\n\n    var over = _ref8.over;\n    setOverId((_over$id = over === null || over === void 0 ? void 0 : over.id) !== null && _over$id !== void 0 ? _over$id : null);\n  }\n\n  function handleDragEnd(_ref9) {\n    var active = _ref9.active,\n        over = _ref9.over;\n    resetState();\n\n    if (projected && over) {\n      var depth = projected.depth,\n          parentId = projected.parentId;\n      var clonedItems = JSON.parse(JSON.stringify(flattenTree(items)));\n      var overIndex = clonedItems.findIndex(function (_ref10) {\n        var id = _ref10.id;\n        return id === over.id;\n      });\n      var activeIndex = clonedItems.findIndex(function (_ref11) {\n        var id = _ref11.id;\n        return id === active.id;\n      });\n      var activeTreeItem = clonedItems[activeIndex];\n      clonedItems[activeIndex] = _objectSpread(_objectSpread({}, activeTreeItem), {}, {\n        depth: depth,\n        parentId: parentId\n      });\n      var sortedItems = arrayMove(clonedItems, activeIndex, overIndex);\n      var newItems = buildTree(sortedItems);\n      setItems(newItems);\n    }\n  }\n\n  function handleDragCancel() {\n    resetState();\n  }\n\n  function resetState() {\n    setOverId(null);\n    setActiveId(null);\n    setOffsetLeft(0);\n    document.body.style.setProperty(\"cursor\", \"\");\n  }\n\n  function handleRemove(id) {\n    setItems(function (items) {\n      return removeItem(items, id);\n    });\n  }\n\n  function handleCollapse(id) {\n    setItems(function (items) {\n      return setProperty(items, id, \"collapsed\", function (value) {\n        console.log(value);\n        return !value;\n      });\n    });\n  }\n}\n\n_s(SortableTree, \"A9mDvE+438IUM+nQGxD7Mftfq8g=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n\n_c = SortableTree;\n\nvar adjustTranslate = function adjustTranslate(_ref12) {\n  var transform = _ref12.transform;\n  return _objectSpread(_objectSpread({}, transform), {}, {\n    y: transform.y - 25\n  });\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SortableTree\");","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/src/components/SortableTree.tsx"],"names":["React","useEffect","useMemo","useRef","useState","createPortal","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","DragOverlay","LayoutMeasuringStrategy","defaultDropAnimation","SortableContext","arrayMove","verticalListSortingStrategy","buildTree","flattenTree","getProjection","getChildCount","removeItem","removeChildrenOf","setProperty","sortableTreeKeyboardCoordinates","TreeItem","SortableTreeItem","initialItems","id","children","layoutMeasuring","strategy","Always","dropAnimation","dragSourceOpacity","SortableTree","collapsible","defaultItems","indicator","indentationWidth","removable","items","setItems","activeId","setActiveId","overId","setOverId","offsetLeft","setOffsetLeft","flattenedItems","flattenedTree","collapsedItems","reduce","acc","collapsed","length","projected","sensorContext","offset","coordinateGetter","sensors","sortedIds","map","activeItem","find","current","adjustTranslate","undefined","handleDragStart","handleDragMove","handleDragOver","handleDragEnd","handleDragCancel","depth","Boolean","handleCollapse","handleRemove","document","body","active","style","delta","x","over","resetState","parentId","clonedItems","JSON","parse","stringify","overIndex","findIndex","activeIndex","activeTreeItem","sortedItems","newItems","value","console","log","transform","y"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport {\r\n  DndContext,\r\n  closestCenter,\r\n  KeyboardSensor,\r\n  PointerSensor,\r\n  useSensor,\r\n  useSensors,\r\n  DragStartEvent,\r\n  DragOverlay,\r\n  DragMoveEvent,\r\n  DragEndEvent,\r\n  DragOverEvent,\r\n  LayoutMeasuring,\r\n  LayoutMeasuringStrategy,\r\n  DropAnimation,\r\n  defaultDropAnimation,\r\n  Modifier,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n  SortableContext,\r\n  arrayMove,\r\n  verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport {\r\n  buildTree,\r\n  flattenTree,\r\n  getProjection,\r\n  getChildCount,\r\n  removeItem,\r\n  removeChildrenOf,\r\n  setProperty,\r\n} from \"./utilities\";\r\nimport type { FlattenedItem, SensorContext, TreeItems } from \"./types\";\r\nimport { sortableTreeKeyboardCoordinates } from \"./keyboardCoordinates\";\r\nimport { TreeItem, SortableTreeItem } from \"./\";\r\n\r\nconst initialItems: TreeItems = [\r\n  {\r\n    id: \"Home\",\r\n    children: [],\r\n  },\r\n  {\r\n    id: \"Collections\",\r\n    children: [\r\n      { id: \"Spring\", children: [] },\r\n      { id: \"Summer\", children: [] },\r\n      { id: \"Fall\", children: [] },\r\n      { id: \"Winter\", children: [] },\r\n    ],\r\n  },\r\n  {\r\n    id: \"About Us\",\r\n    children: [],\r\n  },\r\n  {\r\n    id: \"My Account\",\r\n    children: [\r\n      { id: \"Addresses\", children: [] },\r\n      { id: \"Order History\", children: [] },\r\n    ],\r\n  },\r\n];\r\n\r\nconst layoutMeasuring: Partial<LayoutMeasuring> = {\r\n  strategy: LayoutMeasuringStrategy.Always,\r\n};\r\n\r\nconst dropAnimation: DropAnimation = {\r\n  ...defaultDropAnimation,\r\n  dragSourceOpacity: 0.5,\r\n};\r\n\r\ninterface Props {\r\n  collapsible?: any;\r\n  defaultItems?: TreeItems;\r\n  indentationWidth?: number;\r\n  indicator?: boolean;\r\n  removable?: boolean;\r\n}\r\n\r\nexport default function SortableTree({\r\n  collapsible,\r\n  defaultItems = initialItems,\r\n  indicator,\r\n  indentationWidth = 50,\r\n  removable,\r\n}: Props) {\r\n  const [items, setItems] = useState(() => defaultItems);\r\n  const [activeId, setActiveId] = useState<string | null>(null);\r\n  const [overId, setOverId] = useState<string | null>(null);\r\n  const [offsetLeft, setOffsetLeft] = useState(0);\r\n  const flattenedItems = useMemo(() => {\r\n    const flattenedTree = flattenTree(items);\r\n    const collapsedItems = flattenedTree.reduce<string[]>(\r\n      (acc, { children, collapsed, id }) =>\r\n        collapsed && children.length ? [...acc, id] : acc,\r\n      []\r\n    );\r\n\r\n    return removeChildrenOf(\r\n      flattenedTree,\r\n      activeId ? [activeId, ...collapsedItems] : collapsedItems\r\n    );\r\n  }, [activeId, items]);\r\n  const projected =\r\n    activeId && overId\r\n      ? getProjection(\r\n          flattenedItems,\r\n          activeId,\r\n          overId,\r\n          offsetLeft,\r\n          indentationWidth\r\n        )\r\n      : null;\r\n  const sensorContext: SensorContext = useRef({\r\n    items: flattenedItems,\r\n    offset: offsetLeft,\r\n  });\r\n  const [coordinateGetter] = useState(() =>\r\n    sortableTreeKeyboardCoordinates(sensorContext, indentationWidth)\r\n  );\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor),\r\n    useSensor(KeyboardSensor, {\r\n      coordinateGetter,\r\n    })\r\n  );\r\n\r\n  const sortedIds = useMemo(\r\n    () => flattenedItems.map(({ id }) => id),\r\n    [flattenedItems]\r\n  );\r\n  const activeItem = activeId\r\n    ? flattenedItems.find(({ id }) => id === activeId)\r\n    : null;\r\n\r\n  useEffect(() => {\r\n    sensorContext.current = {\r\n      items: flattenedItems,\r\n      offset: offsetLeft,\r\n    };\r\n  }, [flattenedItems, offsetLeft]);\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      modifiers={indicator ? [adjustTranslate] : undefined}\r\n      collisionDetection={closestCenter}\r\n      layoutMeasuring={layoutMeasuring}\r\n      onDragStart={handleDragStart}\r\n      onDragMove={handleDragMove}\r\n      onDragOver={handleDragOver}\r\n      onDragEnd={handleDragEnd}\r\n      onDragCancel={handleDragCancel}\r\n    >\r\n      <SortableContext items={sortedIds} strategy={verticalListSortingStrategy}>\r\n        {flattenedItems.map(({ id, children, collapsed, depth }) => (\r\n          <SortableTreeItem\r\n            key={id}\r\n            id={id}\r\n            value={id}\r\n            depth={id === activeId && projected ? projected.depth : depth}\r\n            indentationWidth={indentationWidth}\r\n            indicator={indicator}\r\n            collapsed={Boolean(collapsed && children.length)}\r\n            onCollapse={\r\n              collapsible && children.length\r\n                ? () => handleCollapse(id)\r\n                : undefined\r\n            }\r\n            onRemove={removable ? () => handleRemove(id) : undefined}\r\n          />\r\n        ))}\r\n        {createPortal(\r\n          <DragOverlay dropAnimation={dropAnimation}>\r\n            {activeId && activeItem ? (\r\n              <TreeItem\r\n                depth={activeItem.depth}\r\n                clone\r\n                childCount={getChildCount(items, activeId) + 1}\r\n                value={activeId}\r\n                indentationWidth={indentationWidth}\r\n              />\r\n            ) : null}\r\n          </DragOverlay>,\r\n          document.body\r\n        )}\r\n      </SortableContext>\r\n    </DndContext>\r\n  );\r\n\r\n  function handleDragStart({ active: { id } }: DragStartEvent) {\r\n    setActiveId(id);\r\n    setOverId(id);\r\n\r\n    document.body.style.setProperty(\"cursor\", \"grabbing\");\r\n  }\r\n\r\n  function handleDragMove({ delta }: DragMoveEvent) {\r\n    setOffsetLeft(delta.x);\r\n  }\r\n\r\n  function handleDragOver({ over }: DragOverEvent) {\r\n    setOverId(over?.id ?? null);\r\n  }\r\n\r\n  function handleDragEnd({ active, over }: DragEndEvent) {\r\n    resetState();\r\n\r\n    if (projected && over) {\r\n      const { depth, parentId } = projected;\r\n      const clonedItems: FlattenedItem[] = JSON.parse(\r\n        JSON.stringify(flattenTree(items))\r\n      );\r\n      const overIndex = clonedItems.findIndex(({ id }) => id === over.id);\r\n      const activeIndex = clonedItems.findIndex(({ id }) => id === active.id);\r\n      const activeTreeItem = clonedItems[activeIndex];\r\n\r\n      clonedItems[activeIndex] = { ...activeTreeItem, depth, parentId };\r\n\r\n      const sortedItems = arrayMove(clonedItems, activeIndex, overIndex);\r\n      const newItems = buildTree(sortedItems);\r\n\r\n      setItems(newItems);\r\n    }\r\n  }\r\n\r\n  function handleDragCancel() {\r\n    resetState();\r\n  }\r\n\r\n  function resetState() {\r\n    setOverId(null);\r\n    setActiveId(null);\r\n    setOffsetLeft(0);\r\n\r\n    document.body.style.setProperty(\"cursor\", \"\");\r\n  }\r\n\r\n  function handleRemove(id: string) {\r\n    setItems((items) => removeItem(items, id));\r\n  }\r\n\r\n  function handleCollapse(id: string) {\r\n    setItems((items: any) =>\r\n      setProperty(items, id, \"collapsed\", (value: any) => {\r\n        console.log(value);\r\n        return !value;\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nconst adjustTranslate: Modifier = ({ transform }) => {\r\n  return {\r\n    ...transform,\r\n    y: transform.y - 25,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}