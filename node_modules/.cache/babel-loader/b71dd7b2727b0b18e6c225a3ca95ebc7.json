{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DateInput) {\n  var DocumentedDateInput = describe(DateInput).availableAt(getAvailableAtBadge('DateInput', 'Input')).description('A control to input a single date or a date range.').usage(\"import { DateInput } from 'grommet';\\n<DateInput id='item' name='item' />\").intrinsicElement('div');\n  DocumentedDateInput.propTypes = {\n    buttonProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying DropButton\\n      when not inline and no format.\"),\n    calendarProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Calendar.'),\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The default date or date range value in ISO8601 format.'),\n    dropProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Drop when not inline.').defaultValue({\n      align: {\n        top: 'bottom',\n        left: 'left'\n      }\n    }),\n    format: PropTypes.string.description(\"The date format to use. If not specified, the date value will not\\n      be displayed as a text string and the user will not be able to enter\\n      a date by typing. For example: 'mm/dd/yyyy', or for a range:\\n      'mm/dd/yyyy-mm/dd/yyyy'. For a date without leading zeros: 'm/d/yyyy'. \\n      This property should be used when in a Form.\"),\n    id: PropTypes.string.description('The id of the input.'),\n    inline: PropTypes.bool.description(\"Whether the calendar should always be shown or via a Drop when\\n      interacting with the input.\").defaultValue(false),\n    inputProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying MaskedInput\\n      when there is a format.\"),\n    name: PropTypes.string.description(\"The name of the input.\\n      This property is required when used within FormField.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user types or selects a date.\\n      The updated value will be available via 'event.value'.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The date or date range value(s) in ISO8601 format.')\n  };\n  return DocumentedDateInput;\n};\nexport var themeDoc = {\n  'dateInput.icon.size': {\n    description: \"The size of the Calendar icon\",\n    type: 'string',\n    defaultValue: '24px'\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/DateInput/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","DateInput","DocumentedDateInput","availableAt","description","usage","intrinsicElement","propTypes","buttonProps","shape","calendarProps","defaultValue","oneOfType","string","arrayOf","dropProps","align","top","left","format","id","inline","bool","inputProps","name","onChange","func","value","themeDoc","type"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,OAAO,IAAIC,GAAG,GAAG,SAASA,GAAT,CAAaC,SAAb,EAAwB;AACvC,MAAIC,mBAAmB,GAAGL,QAAQ,CAACI,SAAD,CAAR,CAAoBE,WAApB,CAAgCJ,mBAAmB,CAAC,WAAD,EAAc,OAAd,CAAnD,EAA2EK,WAA3E,CAAuF,mDAAvF,EAA4IC,KAA5I,CAAkJ,2EAAlJ,EAA+NC,gBAA/N,CAAgP,KAAhP,CAA1B;AACAJ,EAAAA,mBAAmB,CAACK,SAApB,GAAgC;AAC9BC,IAAAA,WAAW,EAAEV,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,8FAAhC,CADiB;AAE9BM,IAAAA,aAAa,EAAEZ,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,uDAAhC,CAFe;AAG9BO,IAAAA,YAAY,EAAEb,SAAS,CAACc,SAAV,CAAoB,CAACd,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACe,MAA5B,CAAnB,CAApB,EAA6ET,WAA7E,CAAyF,yDAAzF,CAHgB;AAI9BW,IAAAA,SAAS,EAAEjB,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,mEAAhC,EAAqGO,YAArG,CAAkH;AAC3HK,MAAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAAE,QADA;AAELC,QAAAA,IAAI,EAAE;AAFD;AADoH,KAAlH,CAJmB;AAU9BC,IAAAA,MAAM,EAAErB,SAAS,CAACe,MAAV,CAAiBT,WAAjB,CAA6B,sVAA7B,CAVsB;AAW9BgB,IAAAA,EAAE,EAAEtB,SAAS,CAACe,MAAV,CAAiBT,WAAjB,CAA6B,sBAA7B,CAX0B;AAY9BiB,IAAAA,MAAM,EAAEvB,SAAS,CAACwB,IAAV,CAAelB,WAAf,CAA2B,mGAA3B,EAAgIO,YAAhI,CAA6I,KAA7I,CAZsB;AAa9BY,IAAAA,UAAU,EAAEzB,SAAS,CAACW,KAAV,CAAgB,EAAhB,EAAoBL,WAApB,CAAgC,wFAAhC,CAbkB;AAc9BoB,IAAAA,IAAI,EAAE1B,SAAS,CAACe,MAAV,CAAiBT,WAAjB,CAA6B,qFAA7B,CAdwB;AAe9BqB,IAAAA,QAAQ,EAAE3B,SAAS,CAAC4B,IAAV,CAAetB,WAAf,CAA2B,mIAA3B,CAfoB;AAgB9BuB,IAAAA,KAAK,EAAE7B,SAAS,CAACc,SAAV,CAAoB,CAACd,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACe,MAA5B,CAAnB,CAApB,EAA6ET,WAA7E,CAAyF,oDAAzF;AAhBuB,GAAhC;AAkBA,SAAOF,mBAAP;AACD,CArBM;AAsBP,OAAO,IAAI0B,QAAQ,GAAG;AACpB,yBAAuB;AACrBxB,IAAAA,WAAW,EAAE,+BADQ;AAErByB,IAAAA,IAAI,EAAE,QAFe;AAGrBlB,IAAAA,YAAY,EAAE;AAHO;AADH,CAAf","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DateInput) {\n  var DocumentedDateInput = describe(DateInput).availableAt(getAvailableAtBadge('DateInput', 'Input')).description('A control to input a single date or a date range.').usage(\"import { DateInput } from 'grommet';\\n<DateInput id='item' name='item' />\").intrinsicElement('div');\n  DocumentedDateInput.propTypes = {\n    buttonProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying DropButton\\n      when not inline and no format.\"),\n    calendarProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Calendar.'),\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The default date or date range value in ISO8601 format.'),\n    dropProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Drop when not inline.').defaultValue({\n      align: {\n        top: 'bottom',\n        left: 'left'\n      }\n    }),\n    format: PropTypes.string.description(\"The date format to use. If not specified, the date value will not\\n      be displayed as a text string and the user will not be able to enter\\n      a date by typing. For example: 'mm/dd/yyyy', or for a range:\\n      'mm/dd/yyyy-mm/dd/yyyy'. For a date without leading zeros: 'm/d/yyyy'. \\n      This property should be used when in a Form.\"),\n    id: PropTypes.string.description('The id of the input.'),\n    inline: PropTypes.bool.description(\"Whether the calendar should always be shown or via a Drop when\\n      interacting with the input.\").defaultValue(false),\n    inputProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying MaskedInput\\n      when there is a format.\"),\n    name: PropTypes.string.description(\"The name of the input.\\n      This property is required when used within FormField.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user types or selects a date.\\n      The updated value will be available via 'event.value'.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The date or date range value(s) in ISO8601 format.')\n  };\n  return DocumentedDateInput;\n};\nexport var themeDoc = {\n  'dateInput.icon.size': {\n    description: \"The size of the Calendar icon\",\n    type: 'string',\n    defaultValue: '24px'\n  }\n};"]},"metadata":{},"sourceType":"module"}