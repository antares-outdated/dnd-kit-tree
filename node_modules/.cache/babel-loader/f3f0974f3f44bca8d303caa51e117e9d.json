{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var chartProps = _ref.chartProps,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      _ref$serie = _ref.serie,\n      serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n      suffix = serie.suffix; // pull the x-axis values from the first chart, all should have the same\n\n  var _axis = (Array.isArray(chartProps[0]) ? chartProps[0][0] : chartProps[0]).axis,\n      axisValues = _axis[1];\n  var divideBy;\n  var unit;\n\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, axisValues.map(function (v) {\n      return Math.abs(v);\n    }));\n\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  } // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n\n\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, axisValues.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n\n    return /*#__PURE__*/React.createElement(Box // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/DataChart/YAxis.js"],"names":["React","forwardRef","useContext","ThemeContext","Box","round","doublePad","YAxis","_ref","ref","chartProps","pad","renderValue","_ref$serie","serie","theme","render","suffix","_axis","Array","isArray","axis","axisValues","divideBy","unit","maxValue","Math","max","apply","map","v","abs","edgeSize","vertical","basis","global","createElement","gridArea","justify","flex","axisValue","i","content","undefined","key","align"],"mappings":"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","sourcesContent":["import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var chartProps = _ref.chartProps,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      _ref$serie = _ref.serie,\n      serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n      suffix = serie.suffix; // pull the x-axis values from the first chart, all should have the same\n\n  var _axis = (Array.isArray(chartProps[0]) ? chartProps[0][0] : chartProps[0]).axis,\n      axisValues = _axis[1];\n  var divideBy;\n  var unit;\n\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, axisValues.map(function (v) {\n      return Math.abs(v);\n    }));\n\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  } // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n\n\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, axisValues.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n\n    return /*#__PURE__*/React.createElement(Box // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };"]},"metadata":{},"sourceType":"module"}