{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Pagination) {\n  var DocumentedPagination = describe(Pagination).availableAt(getAvailableAtBadge('Pagination', 'Controls')).description(\"A control that enables selection of a single page from a \\n      range of pages.\").usage(\"import { Pagination } from 'grommet';\\n      <Pagination />\").intrinsicElement('nav');\n  DocumentedPagination.propTypes = _extends({}, genericProps, {\n    numberEdgePages: PropTypes.number.description(\"The number of pagination buttons visible at the start and end of page \\n        range.\").defaultValue(1),\n    numberItems: PropTypes.number.description('The total number of items to paginate.').defaultValue(undefined),\n    numberMiddlePages: PropTypes.number.description(\"The number of pagination buttons visible in the middle of the \\n        controls.\").defaultValue(3),\n    onChange: PropTypes.func.description(\"Function called when the user clicks a page or arrow button. The \\n        single argument is an event containing the target page via \\n        `event.page`, and the startIndex and endIndex for items contained \\n        in the target page via `event.startIndex` and `event.endIndex`, \\n        respectively.\").defaultValue(undefined),\n    page: PropTypes.number.description(\"The default page. If used with onChange, it can be used to control the \\n        active page via state.\").defaultValue(undefined),\n    size: PropTypes.oneOf(['small', 'medium', 'large']).description('Specifies what size the pagination control buttons should be.').defaultValue('medium'),\n    step: PropTypes.number.description('The number of items per page.').defaultValue(10)\n  });\n  return DocumentedPagination;\n};\nexport var themeDoc = {\n  'pagination.button': {\n    description: 'Any valid Button theming to apply on the pagination buttons.',\n    type: 'object',\n    defaultValue: \"{\\n      active: {\\n        background: {\\n          color: 'active-background',\\n        },\\n      },\\n      color: 'text-strong',\\n      hover: {\\n        background: {\\n          color: 'background-contrast',\\n        },\\n        color: undefined,\\n      },\\n      size: {\\n        small: {\\n          border: {\\n            radius: 3px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 14px,\\n          height: 30px,\\n          width: 30px,\\n        },\\n        medium: {\\n          border: {\\n            radius: 4px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 18px,\\n          height: 36px,\\n          width: 36px,\\n        },\\n        large: {\\n          border: {\\n            radius: 6px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 22px,\\n          height: 48px,\\n          width: 48px,\\n        },\\n      },\\n    }\"\n  },\n  'pagination.container': {\n    description: \"Any valid Box props for the Box wrapping the \\n    pagination controls.\",\n    type: 'object'\n  },\n  'pagination.container.extend': {\n    description: \"Any additional style for the Box wrapping \\n    the pagination controls.\",\n    type: 'string | (props) => {}'\n  },\n  'pagination.controls.align': {\n    description: \"How the pagination controls should be aligned \\n    within the containing Box.\",\n    type: 'string',\n    defaultValue: 'center'\n  },\n  'pagination.controls.direction': {\n    description: \"Direction in which the containing Box should \\n    display the pagination controls.\",\n    type: 'string',\n    defaultValue: 'row'\n  },\n  'pagination.controls.gap': {\n    description: \"Amount of gap spacing between each control.\",\n    type: 'string',\n    defaultValue: 'xxsmall'\n  },\n  'pagination.controls.margin': {\n    description: \"Amount of margin surrounding the controls.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'pagination.controls.pad': {\n    description: \"Amount of pad surrounding the controls.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'pagination.icons.color': {\n    description: \"The color used for the icon.\",\n    type: 'string | { dark: string, light: string }'\n  },\n  'pagination.icons.next': {\n    description: \"Icon to use as the 'next page' control.\",\n    type: 'element',\n    defaultValue: '<Next />'\n  },\n  'pagination.icons.previous': {\n    description: \"Icon to use as the 'previous page' control.\",\n    type: 'element',\n    defaultValue: '<Previous />'\n  }\n};","map":{"version":3,"sources":["C:/Users/antaresofficial/Desktop/tree/node_modules/grommet/es6/components/Pagination/doc.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","describe","PropTypes","genericProps","getAvailableAtBadge","doc","Pagination","DocumentedPagination","availableAt","description","usage","intrinsicElement","propTypes","numberEdgePages","number","defaultValue","numberItems","undefined","numberMiddlePages","onChange","func","page","size","oneOf","step","themeDoc","type"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps } from '../../utils/prop-types';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(Pagination) {\n  var DocumentedPagination = describe(Pagination).availableAt(getAvailableAtBadge('Pagination', 'Controls')).description(\"A control that enables selection of a single page from a \\n      range of pages.\").usage(\"import { Pagination } from 'grommet';\\n      <Pagination />\").intrinsicElement('nav');\n  DocumentedPagination.propTypes = _extends({}, genericProps, {\n    numberEdgePages: PropTypes.number.description(\"The number of pagination buttons visible at the start and end of page \\n        range.\").defaultValue(1),\n    numberItems: PropTypes.number.description('The total number of items to paginate.').defaultValue(undefined),\n    numberMiddlePages: PropTypes.number.description(\"The number of pagination buttons visible in the middle of the \\n        controls.\").defaultValue(3),\n    onChange: PropTypes.func.description(\"Function called when the user clicks a page or arrow button. The \\n        single argument is an event containing the target page via \\n        `event.page`, and the startIndex and endIndex for items contained \\n        in the target page via `event.startIndex` and `event.endIndex`, \\n        respectively.\").defaultValue(undefined),\n    page: PropTypes.number.description(\"The default page. If used with onChange, it can be used to control the \\n        active page via state.\").defaultValue(undefined),\n    size: PropTypes.oneOf(['small', 'medium', 'large']).description('Specifies what size the pagination control buttons should be.').defaultValue('medium'),\n    step: PropTypes.number.description('The number of items per page.').defaultValue(10)\n  });\n  return DocumentedPagination;\n};\nexport var themeDoc = {\n  'pagination.button': {\n    description: 'Any valid Button theming to apply on the pagination buttons.',\n    type: 'object',\n    defaultValue: \"{\\n      active: {\\n        background: {\\n          color: 'active-background',\\n        },\\n      },\\n      color: 'text-strong',\\n      hover: {\\n        background: {\\n          color: 'background-contrast',\\n        },\\n        color: undefined,\\n      },\\n      size: {\\n        small: {\\n          border: {\\n            radius: 3px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 14px,\\n          height: 30px,\\n          width: 30px,\\n        },\\n        medium: {\\n          border: {\\n            radius: 4px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 18px,\\n          height: 36px,\\n          width: 36px,\\n        },\\n        large: {\\n          border: {\\n            radius: 6px,\\n            width: 2px,\\n          },\\n          pad: {\\n            vertical: 4px,\\n            horizontal: 4px,\\n          },\\n          font: 22px,\\n          height: 48px,\\n          width: 48px,\\n        },\\n      },\\n    }\"\n  },\n  'pagination.container': {\n    description: \"Any valid Box props for the Box wrapping the \\n    pagination controls.\",\n    type: 'object'\n  },\n  'pagination.container.extend': {\n    description: \"Any additional style for the Box wrapping \\n    the pagination controls.\",\n    type: 'string | (props) => {}'\n  },\n  'pagination.controls.align': {\n    description: \"How the pagination controls should be aligned \\n    within the containing Box.\",\n    type: 'string',\n    defaultValue: 'center'\n  },\n  'pagination.controls.direction': {\n    description: \"Direction in which the containing Box should \\n    display the pagination controls.\",\n    type: 'string',\n    defaultValue: 'row'\n  },\n  'pagination.controls.gap': {\n    description: \"Amount of gap spacing between each control.\",\n    type: 'string',\n    defaultValue: 'xxsmall'\n  },\n  'pagination.controls.margin': {\n    description: \"Amount of margin surrounding the controls.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'pagination.controls.pad': {\n    description: \"Amount of pad surrounding the controls.\",\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'pagination.icons.color': {\n    description: \"The color used for the icon.\",\n    type: 'string | { dark: string, light: string }'\n  },\n  'pagination.icons.next': {\n    description: \"Icon to use as the 'next page' control.\",\n    type: 'element',\n    defaultValue: '<Next />'\n  },\n  'pagination.icons.previous': {\n    description: \"Icon to use as the 'previous page' control.\",\n    type: 'element',\n    defaultValue: '<Previous />'\n  }\n};"]},"metadata":{},"sourceType":"module"}